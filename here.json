{
    "analyzedAt": "2017-01-23T09:13:58.067Z",
    "collected": {
        "metadata": {
            "name": "async",
            "version": "2.1.4",
            "description": "Higher-order functions and common patterns for asynchronous code",
            "keywords": ["async", "callback", "module", "utility"],
            "date": "2016-11-22T19:16:50.375Z",
            "author": {
                "name": "Caolan McMahon"
            },
            "publisher": {
                "username": "megawac",
                "email": "megawac@gmail.com"
            },
            "maintainers": [{
                "username": "caolan",
                "email": "caolan.mcmahon@gmail.com"
            }, {
                "username": "beaugunderson",
                "email": "beau@beaugunderson.com"
            }, {
                "username": "aearly",
                "email": "alexander.early@gmail.com"
            }, {
                "username": "megawac",
                "email": "megawac@gmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git+https://github.com/caolan/async.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/async",
                "homepage": "https://github.com/caolan/async#readme",
                "repository": "https://github.com/caolan/async",
                "bugs": "https://github.com/caolan/async/issues"
            },
            "license": "MIT",
            "dependencies": {
                "lodash": "^4.14.0"
            },
            "devDependencies": {
                "babel-cli": "^6.16.0",
                "babel-core": "^6.3.26",
                "babel-plugin-add-module-exports": "^0.2.1",
                "babel-plugin-istanbul": "^2.0.1",
                "babel-plugin-transform-es2015-modules-commonjs": "^6.3.16",
                "babel-preset-es2015": "^6.3.13",
                "babelify": "^7.2.0",
                "benchmark": "^2.1.1",
                "bluebird": "^3.4.6",
                "chai": "^3.1.0",
                "cheerio": "^0.22.0",
                "coveralls": "^2.11.2",
                "es6-promise": "^2.3.0",
                "eslint": "^2.13.1",
                "fs-extra": "^0.26.7",
                "gh-pages-deploy": "^0.4.2",
                "jsdoc": "^3.4.0",
                "karma": "^1.3.0",
                "karma-browserify": "^5.1.0",
                "karma-firefox-launcher": "^1.0.0",
                "karma-mocha": "^1.2.0",
                "karma-mocha-reporter": "^2.2.0",
                "mocha": "^3.1.2",
                "native-promise-only": "^0.8.0-a",
                "nyc": "^7.0.0",
                "recursive-readdir": "^1.3.0",
                "rimraf": "^2.5.0",
                "rollup": "^0.36.3",
                "rollup-plugin-node-resolve": "^2.0.0",
                "rollup-plugin-npm": "^2.0.0",
                "rsvp": "^3.0.18",
                "semver": "^4.3.6",
                "uglify-js": "~2.7.3",
                "vinyl-buffer": "^1.0.0",
                "vinyl-source-stream": "^1.1.0",
                "watchify": "^3.7.0",
                "yargs": "~3.9.1"
            },
            "releases": [{
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 1
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 4
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 13
            }, {
                "from": "2015-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 26
            }],
            "hasTestScript": true,
            "readme": "![Async Logo](https://raw.githubusercontent.com/caolan/async/master/logo/async-logo_readme.jpg)\n\n[![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async)\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAsync is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with [Node.js](https://nodejs.org/) and installable via `npm install --save async`, it can also be used directly in the browser.\n\nFor Documentation, visit <http://caolan.github.io/async/>\n\n*For Async v1.5.x documentation, go [HERE](https://github.com/caolan/async/blob/v1.5.2/README.md)*"
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-22T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 547773
            }, {
                "from": "2017-01-16T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 8704079
            }, {
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 31142251
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 107384612
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 215841334
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 392136754
            }],
            "dependentsCount": 16393,
            "starsCount": 983
        },
        "github": {
            "homepage": "http://caolan.github.io/async/",
            "starsCount": 20257,
            "forksCount": 1960,
            "subscribersCount": 680,
            "issues": {
                "count": 1354,
                "openCount": 26,
                "distribution": {
                    "3600": 146,
                    "10800": 57,
                    "32400": 123,
                    "97200": 152,
                    "291600": 139,
                    "874800": 95,
                    "2624400": 81,
                    "7873200": 100,
                    "23619600": 230,
                    "70858800": 203,
                    "212576400": 28
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "aearly",
                "commitsCount": 293
            }, {
                "username": "megawac",
                "commitsCount": 161
            }, {
                "username": "caolan",
                "commitsCount": 149
            }, {
                "username": "hargasinski",
                "commitsCount": 46
            }, {
                "username": "ivanseidel",
                "commitsCount": 28
            }, {
                "username": "beaugunderson",
                "commitsCount": 25
            }, {
                "username": "ezubarev",
                "commitsCount": 20
            }, {
                "username": "charlierudolph",
                "commitsCount": 18
            }, {
                "username": "zartdinov",
                "commitsCount": 11
            }, {
                "username": "brianmaissy",
                "commitsCount": 10
            }, {
                "username": "jessehouchins",
                "commitsCount": 7
            }, {
                "username": "fritx",
                "commitsCount": 7
            }, {
                "username": "justincy",
                "commitsCount": 7
            }, {
                "username": "ex1st",
                "commitsCount": 7
            }, {
                "username": "suguru03",
                "commitsCount": 7
            }, {
                "username": "rmg",
                "commitsCount": 6
            }, {
                "username": "seriousManual",
                "commitsCount": 6
            }, {
                "username": "Kikobeats",
                "commitsCount": 6
            }, {
                "username": "raydog",
                "commitsCount": 6
            }, {
                "username": "andalm",
                "commitsCount": 6
            }, {
                "username": "allanca",
                "commitsCount": 5
            }, {
                "username": "mikermcneil",
                "commitsCount": 5
            }, {
                "username": "leahciMic",
                "commitsCount": 4
            }, {
                "username": "kimptoc",
                "commitsCount": 4
            }, {
                "username": "Mithgol",
                "commitsCount": 4
            }, {
                "username": "vsivsi",
                "commitsCount": 4
            }, {
                "username": "edeustace",
                "commitsCount": 4
            }, {
                "username": "b-paul",
                "commitsCount": 4
            }, {
                "username": "jnordberg",
                "commitsCount": 4
            }, {
                "username": "tekwiz",
                "commitsCount": 4
            }, {
                "username": "bojand",
                "commitsCount": 4
            }, {
                "username": "parshap",
                "commitsCount": 3
            }, {
                "username": "calvinfo",
                "commitsCount": 3
            }, {
                "username": "rhyzx",
                "commitsCount": 3
            }, {
                "username": "th3james",
                "commitsCount": 3
            }, {
                "username": "boutell",
                "commitsCount": 3
            }, {
                "username": "asyncanup",
                "commitsCount": 3
            }, {
                "username": "uzyn",
                "commitsCount": 3
            }, {
                "username": "adam-26",
                "commitsCount": 3
            }, {
                "username": "marcolino",
                "commitsCount": 3
            }, {
                "username": "dacoozheng",
                "commitsCount": 3
            }, {
                "username": "silentroach",
                "commitsCount": 3
            }, {
                "username": "ajfranzoia",
                "commitsCount": 3
            }, {
                "username": "aianus",
                "commitsCount": 3
            }, {
                "username": "MaZderMind",
                "commitsCount": 2
            }, {
                "username": "indexzero",
                "commitsCount": 2
            }, {
                "username": "mmalecki",
                "commitsCount": 2
            }, {
                "username": "jstewmon",
                "commitsCount": 2
            }, {
                "username": "tiankongldp",
                "commitsCount": 2
            }, {
                "username": "ceedubs",
                "commitsCount": 2
            }, {
                "username": "andrewrk",
                "commitsCount": 2
            }, {
                "username": "jkroso",
                "commitsCount": 2
            }, {
                "username": "raszi",
                "commitsCount": 2
            }, {
                "username": "dougwilson",
                "commitsCount": 2
            }, {
                "username": "calendee",
                "commitsCount": 2
            }, {
                "username": "ognivo",
                "commitsCount": 2
            }, {
                "username": "dandv",
                "commitsCount": 2
            }, {
                "username": "jiabei",
                "commitsCount": 2
            }, {
                "username": "nazomikan",
                "commitsCount": 2
            }, {
                "username": "jsdevel",
                "commitsCount": 2
            }, {
                "username": "Qix-",
                "commitsCount": 2
            }, {
                "username": "jub3i",
                "commitsCount": 2
            }, {
                "username": "bao987654321",
                "commitsCount": 2
            }, {
                "username": "bcoe",
                "commitsCount": 2
            }, {
                "username": "scop",
                "commitsCount": 2
            }, {
                "username": "benfleis",
                "commitsCount": 2
            }, {
                "username": "gr2m",
                "commitsCount": 2
            }, {
                "username": "asilvas",
                "commitsCount": 2
            }, {
                "username": "ericz",
                "commitsCount": 2
            }, {
                "username": "jdalton",
                "commitsCount": 2
            }, {
                "username": "CodeMan99",
                "commitsCount": 2
            }, {
                "username": "jahraphael",
                "commitsCount": 2
            }, {
                "username": "kpozin",
                "commitsCount": 1
            }, {
                "username": "braddunbar",
                "commitsCount": 1
            }, {
                "username": "brunoqc",
                "commitsCount": 1
            }, {
                "username": "jfhbrook",
                "commitsCount": 1
            }, {
                "username": "alFReD-NSH",
                "commitsCount": 1
            }, {
                "username": "insin",
                "commitsCount": 1
            }, {
                "username": "clutchski",
                "commitsCount": 1
            }, {
                "username": "Sheile",
                "commitsCount": 1
            }, {
                "username": "pierrec",
                "commitsCount": 1
            }, {
                "username": "ixti",
                "commitsCount": 1
            }, {
                "username": "sergi",
                "commitsCount": 1
            }, {
                "username": "iangreenleaf",
                "commitsCount": 1
            }, {
                "username": "pgherveou",
                "commitsCount": 1
            }, {
                "username": "timoxley",
                "commitsCount": 1
            }, {
                "username": "alexgorbatchev",
                "commitsCount": 1
            }, {
                "username": "aadamowski",
                "commitsCount": 1
            }, {
                "username": "dpatti",
                "commitsCount": 1
            }, {
                "username": "langpavel",
                "commitsCount": 1
            }, {
                "username": "feross",
                "commitsCount": 1
            }, {
                "username": "coreyjewett",
                "commitsCount": 1
            }, {
                "username": "ccare",
                "commitsCount": 1
            }, {
                "username": "danbell",
                "commitsCount": 1
            }, {
                "username": "vojtajina",
                "commitsCount": 1
            }, {
                "username": "ashnur",
                "commitsCount": 1
            }, {
                "username": "lookfirst",
                "commitsCount": 1
            }, {
                "username": "RubyTuesdayDONO",
                "commitsCount": 1
            }, {
                "username": "DmitryBochkarev",
                "commitsCount": 1
            }, {
                "username": "tborg",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-16T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 3
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 28
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 70
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 449
            }],
            "statuses": [{
                "context": "coverage/coveralls",
                "state": "success"
            }, {
                "context": "continuous-integration/travis-ci/push",
                "state": "failure"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 1097,
                "testsSize": 0,
                "hasNpmIgnore": true,
                "hasChangelog": true
            },
            "repositorySize": 2747942,
            "linters": {
                "general": ["editorconfig"],
                "js": ["eslint"]
            },
            "coverage": 0.98,
            "badges": [{
                "urls": {
                    "original": "https://travis-ci.org/caolan/async.svg?branch=master",
                    "service": "https://api.travis-ci.org/caolan/async.svg?branch=master",
                    "shields": "https://img.shields.io/travis/caolan/async/master.svg",
                    "content": "https://img.shields.io/travis/caolan/async/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/npm/v/async.svg",
                    "shields": "https://img.shields.io/npm/v/async.svg",
                    "content": "https://img.shields.io/npm/v/async.json"
                },
                "info": {
                    "service": "npm",
                    "type": "version",
                    "modifiers": {
                        "type": "v"
                    }
                }
            }, {
                "urls": {
                    "original": "https://coveralls.io/repos/caolan/async/badge.svg?branch=master",
                    "service": "https://coveralls.io/repos/caolan/async/badge.svg?branch=master",
                    "shields": "https://img.shields.io/coveralls/caolan/async/master.svg",
                    "content": "https://img.shields.io/coveralls/caolan/async/master.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }]
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9999999999999999,
            "tests": 0.272,
            "health": 1,
            "branding": 0.44999999999999996
        },
        "popularity": {
            "communityInterest": 23980,
            "downloadsCount": 35794870.666666664,
            "downloadsAcceleration": 22124.753272450558,
            "dependentsCount": 16393
        },
        "maintenance": {
            "releasesFrequency": 0.9253424657534247,
            "commitsFrequency": 1,
            "openIssues": 1,
            "issuesDistribution": 0
        }
    },
    "score": {
        "final": 0.8257399955845782,
        "detail": {
            "quality": 0.8524092591553843,
            "popularity": 0.9619858154454196,
            "maintenance": 0.6666348069487601
        }
    }
}, {
    "analyzedAt": "2017-01-20T06:34:08.822Z",
    "collected": {
        "metadata": {
            "name": "bluebird",
            "version": "3.4.7",
            "description": "Full featured Promises/A+ implementation with exceptionally good performance",
            "keywords": ["promise", "performance", "promises", "promises-a", "promises-aplus", "async", "await", "deferred", "deferreds", "future", "flow control", "dsl", "fluent interface"],
            "date": "2016-12-22T17:27:51.668Z",
            "author": {
                "name": "Petka Antonov",
                "email": "petka_antonov@hotmail.com",
                "url": "http://github.com/petkaantonov/",
                "username": "esailija"
            },
            "publisher": {
                "username": "esailija",
                "email": "petka_antonov@hotmail.com"
            },
            "maintainers": [{
                "username": "esailija",
                "email": "petka_antonov@hotmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git://github.com/petkaantonov/bluebird.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/bluebird",
                "homepage": "https://github.com/petkaantonov/bluebird",
                "repository": "https://github.com/petkaantonov/bluebird",
                "bugs": "http://github.com/petkaantonov/bluebird/issues"
            },
            "license": "MIT",
            "devDependencies": {
                "acorn": "~0.6.0",
                "baconjs": "^0.7.43",
                "bluebird": "^2.9.2",
                "body-parser": "^1.10.2",
                "browserify": "^8.1.1",
                "cli-table": "~0.3.1",
                "co": "^4.2.0",
                "cross-spawn": "^0.2.3",
                "glob": "^4.3.2",
                "grunt-saucelabs": "~8.4.1",
                "highland": "^2.3.0",
                "istanbul": "^0.3.5",
                "jshint": "^2.6.0",
                "jshint-stylish": "~0.2.0",
                "mkdirp": "~0.5.0",
                "mocha": "~2.1",
                "open": "~0.0.5",
                "optimist": "~0.6.1",
                "rimraf": "~2.2.6",
                "rx": "^2.3.25",
                "serve-static": "^1.7.1",
                "sinon": "~1.7.3",
                "uglify-js": "~2.4.16",
                "kefir": "^2.4.1"
            },
            "releases": [{
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 1
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 1
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 7
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 22
            }, {
                "from": "2015-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 69
            }],
            "hasTestScript": true,
            "hasSelectiveFiles": true,
            "readme": "<a href=\"http://promisesaplus.com/\">\n    <img src=\"http://promisesaplus.com/assets/logo-small.png\" alt=\"Promises/A+ logo\"\n         title=\"Promises/A+ 1.1 compliant\" align=\"right\" />\n</a>\n[![Build Status](https://travis-ci.org/petkaantonov/bluebird.svg?branch=master)](https://travis-ci.org/petkaantonov/bluebird)\n[![coverage-98%](http://img.shields.io/badge/coverage-98%-brightgreen.svg?style=flat)](http://petkaantonov.github.io/bluebird/coverage/debug/index.html)\n\n**Got a question?** Join us on [stackoverflow](http://stackoverflow.com/questions/tagged/bluebird), the [mailing list](https://groups.google.com/forum/#!forum/bluebird-js) or chat on [IRC](https://webchat.freenode.net/?channels=#promises)\n\n# Introduction\n\nBluebird is a fully featured promise library with focus on innovative features and performance\n\nSee the [**bluebird website**](http://bluebirdjs.com/docs/getting-started.html) for further documentation, references and instructions. See the [**API reference**](http://bluebirdjs.com/docs/api-reference.html) here.\n\nFor bluebird 2.x documentation and files, see the [2.x tree](https://github.com/petkaantonov/bluebird/tree/2.x).\n\n# Questions and issues\n\nThe [github issue tracker](https://github.com/petkaantonov/bluebird/issues) is **_only_** for bug reports and feature requests. Anything else, such as questions for help in using the library, should be posted in [StackOverflow](http://stackoverflow.com/questions/tagged/bluebird) under tags `promise` and `bluebird`.\n\n\n\n## Thanks\n\nThanks to BrowserStack for providing us with a free account which lets us support old browsers like IE8. \n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2016 Petka Antonov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-19T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 484434
            }, {
                "from": "2017-01-13T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 2749455
            }, {
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 10427576
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 31445341
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 62918674
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 110829785
            }],
            "dependentsCount": 10267,
            "starsCount": 399
        },
        "github": {
            "homepage": "http://bluebirdjs.com",
            "starsCount": 13564,
            "forksCount": 1660,
            "subscribersCount": 360,
            "issues": {
                "count": 1324,
                "openCount": 43,
                "distribution": {
                    "3600": 292,
                    "10800": 141,
                    "32400": 147,
                    "97200": 167,
                    "291600": 113,
                    "874800": 118,
                    "2624400": 131,
                    "7873200": 129,
                    "23619600": 70,
                    "70858800": 15,
                    "212576400": 1
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "petkaantonov",
                "commitsCount": 1421
            }, {
                "username": "benjamingr",
                "commitsCount": 64
            }, {
                "username": "spion",
                "commitsCount": 24
            }, {
                "username": "calvinmetcalf",
                "commitsCount": 10
            }, {
                "username": "sukima",
                "commitsCount": 6
            }, {
                "username": "overlookmotel",
                "commitsCount": 6
            }, {
                "username": "alubbe",
                "commitsCount": 4
            }, {
                "username": "hvrauhal",
                "commitsCount": 4
            }, {
                "username": "lextiz",
                "commitsCount": 4
            }, {
                "username": "gdi2290",
                "commitsCount": 3
            }, {
                "username": "xaka",
                "commitsCount": 3
            }, {
                "username": "markstos",
                "commitsCount": 3
            }, {
                "username": "tgriesser",
                "commitsCount": 3
            }, {
                "username": "Artazor",
                "commitsCount": 3
            }, {
                "username": "strawbrary",
                "commitsCount": 3
            }, {
                "username": "oliversalzburg",
                "commitsCount": 3
            }, {
                "username": "lddubeau",
                "commitsCount": 3
            }, {
                "username": "lvivski",
                "commitsCount": 3
            }, {
                "username": "BridgeAR",
                "commitsCount": 3
            }, {
                "username": "bjouhier",
                "commitsCount": 3
            }, {
                "username": "samcday",
                "commitsCount": 2
            }, {
                "username": "floatdrop",
                "commitsCount": 2
            }, {
                "username": "cscott",
                "commitsCount": 2
            }, {
                "username": "jonasi",
                "commitsCount": 2
            }, {
                "username": "iarna",
                "commitsCount": 2
            }, {
                "username": "Page-",
                "commitsCount": 2
            }, {
                "username": "stites",
                "commitsCount": 2
            }, {
                "username": "shinnn",
                "commitsCount": 2
            }, {
                "username": "wavded",
                "commitsCount": 2
            }, {
                "username": "grncdr",
                "commitsCount": 2
            }, {
                "username": "mhamann",
                "commitsCount": 2
            }, {
                "username": "mk-pmb",
                "commitsCount": 2
            }, {
                "username": "marchant",
                "commitsCount": 2
            }, {
                "username": "fasterthanlime",
                "commitsCount": 2
            }, {
                "username": "vitaly-t",
                "commitsCount": 2
            }, {
                "username": "jasonmerino",
                "commitsCount": 2
            }, {
                "username": "mgenware",
                "commitsCount": 2
            }, {
                "username": "m-lautenbach",
                "commitsCount": 2
            }, {
                "username": "yonjah",
                "commitsCount": 2
            }, {
                "username": "kevinoid",
                "commitsCount": 2
            }, {
                "username": "JonAbrams",
                "commitsCount": 2
            }, {
                "username": "jmm",
                "commitsCount": 2
            }, {
                "username": "jghaines",
                "commitsCount": 2
            }, {
                "username": "frosas",
                "commitsCount": 2
            }, {
                "username": "wgottschalk",
                "commitsCount": 2
            }, {
                "username": "LudwikJaniuk",
                "commitsCount": 2
            }, {
                "username": "finnigantime",
                "commitsCount": 2
            }, {
                "username": "andreypopp",
                "commitsCount": 1
            }, {
                "username": "pspeter3",
                "commitsCount": 1
            }, {
                "username": "stefanpenner",
                "commitsCount": 1
            }, {
                "username": "Canop",
                "commitsCount": 1
            }, {
                "username": "joliss",
                "commitsCount": 1
            }, {
                "username": "xixixao",
                "commitsCount": 1
            }, {
                "username": "phillipalexander",
                "commitsCount": 1
            }, {
                "username": "gordonwoodhull",
                "commitsCount": 1
            }, {
                "username": "humanchimp",
                "commitsCount": 1
            }, {
                "username": "gabrielf",
                "commitsCount": 1
            }, {
                "username": "dotnil",
                "commitsCount": 1
            }, {
                "username": "parkerault",
                "commitsCount": 1
            }, {
                "username": "anvaka",
                "commitsCount": 1
            }, {
                "username": "azu",
                "commitsCount": 1
            }, {
                "username": "jamesmanning",
                "commitsCount": 1
            }, {
                "username": "Dashron",
                "commitsCount": 1
            }, {
                "username": "mbezjak",
                "commitsCount": 1
            }, {
                "username": "bcaudesaygues",
                "commitsCount": 1
            }, {
                "username": "bryanburgers",
                "commitsCount": 1
            }, {
                "username": "codeNgJon",
                "commitsCount": 1
            }, {
                "username": "askhogan",
                "commitsCount": 1
            }, {
                "username": "alexanderkjeldaas",
                "commitsCount": 1
            }, {
                "username": "MetaMemoryT",
                "commitsCount": 1
            }, {
                "username": "mhelvens",
                "commitsCount": 1
            }, {
                "username": "wcp1231",
                "commitsCount": 1
            }, {
                "username": "demmer",
                "commitsCount": 1
            }, {
                "username": "richguan",
                "commitsCount": 1
            }, {
                "username": "L8D",
                "commitsCount": 1
            }, {
                "username": "samccone",
                "commitsCount": 1
            }, {
                "username": "thataustin",
                "commitsCount": 1
            }, {
                "username": "MadaraUchiha",
                "commitsCount": 1
            }, {
                "username": "nubs",
                "commitsCount": 1
            }, {
                "username": "andyfischer",
                "commitsCount": 1
            }, {
                "username": "yourcelf",
                "commitsCount": 1
            }, {
                "username": "srguiwiz",
                "commitsCount": 1
            }, {
                "username": "Matthew-Davey",
                "commitsCount": 1
            }, {
                "username": "petehunt",
                "commitsCount": 1
            }, {
                "username": "Joris-van-der-Wel",
                "commitsCount": 1
            }, {
                "username": "noseglid",
                "commitsCount": 1
            }, {
                "username": "pon",
                "commitsCount": 1
            }, {
                "username": "matiaszanolli",
                "commitsCount": 1
            }, {
                "username": "kevinburke",
                "commitsCount": 1
            }, {
                "username": "pilwon",
                "commitsCount": 1
            }, {
                "username": "jimlloyd",
                "commitsCount": 1
            }, {
                "username": "dantman",
                "commitsCount": 1
            }, {
                "username": "nizhu",
                "commitsCount": 1
            }, {
                "username": "suguru03",
                "commitsCount": 1
            }, {
                "username": "noahadams",
                "commitsCount": 1
            }, {
                "username": "bergus",
                "commitsCount": 1
            }, {
                "username": "pjeby",
                "commitsCount": 1
            }, {
                "username": "hawkrives",
                "commitsCount": 1
            }, {
                "username": "southpolesteve",
                "commitsCount": 1
            }, {
                "username": "dungsaga",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-13T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 9
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 18
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 74
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 182
            }],
            "statuses": [{
                "context": "continuous-integration/travis-ci/push",
                "state": "success"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 2711,
                "testsSize": 928995,
                "hasChangelog": true
            },
            "repositorySize": 1771622,
            "linters": {
                "general": ["editorconfig"],
                "js": ["jshint"]
            },
            "badges": [{
                "urls": {
                    "original": "https://travis-ci.org/petkaantonov/bluebird.svg?branch=master",
                    "service": "https://api.travis-ci.org/petkaantonov/bluebird.svg?branch=master",
                    "shields": "https://img.shields.io/travis/petkaantonov/bluebird/master.svg",
                    "content": "https://img.shields.io/travis/petkaantonov/bluebird/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }]
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9999999999999999,
            "tests": 0.85,
            "health": 1,
            "branding": 0.15
        },
        "popularity": {
            "communityInterest": 16083,
            "downloadsCount": 10481780.333333334,
            "downloadsAcceleration": 22461.89060121763,
            "dependentsCount": 10267
        },
        "maintenance": {
            "releasesFrequency": 1,
            "commitsFrequency": 1,
            "openIssues": 1,
            "issuesDistribution": 0.9158052386388158
        }
    },
    "score": {
        "final": 0.9637423722655817,
        "detail": {
            "quality": 0.9621689704594919,
            "popularity": 0.9288856574514432,
            "maintenance": 0.9999477171992255
        }
    }
}, {
    "analyzedAt": "2017-01-12T08:58:27.764Z",
    "collected": {
        "metadata": {
            "name": "got",
            "version": "6.7.1",
            "description": "Simplified HTTP requests",
            "keywords": ["http", "https", "get", "got", "url", "uri", "request", "util", "utility", "simple", "curl", "wget", "fetch"],
            "date": "2016-12-29T14:42:52.311Z",
            "publisher": {
                "username": "floatdrop",
                "email": "floatdrop@gmail.com"
            },
            "maintainers": [{
                "username": "sindresorhus",
                "email": "sindresorhus@gmail.com"
            }, {
                "username": "floatdrop",
                "email": "floatdrop@gmail.com"
            }, {
                "username": "kevva",
                "email": "kevinmartensson@gmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git+https://github.com/sindresorhus/got.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/got",
                "homepage": "https://github.com/sindresorhus/got#readme",
                "repository": "https://github.com/sindresorhus/got",
                "bugs": "https://github.com/sindresorhus/got/issues"
            },
            "license": "MIT",
            "dependencies": {
                "create-error-class": "^3.0.0",
                "duplexer3": "^0.1.4",
                "get-stream": "^3.0.0",
                "is-redirect": "^1.0.0",
                "is-retry-allowed": "^1.0.0",
                "is-stream": "^1.0.0",
                "lowercase-keys": "^1.0.0",
                "safe-buffer": "^5.0.1",
                "timed-out": "^4.0.0",
                "unzip-response": "^2.0.1",
                "url-parse-lax": "^1.0.0"
            },
            "devDependencies": {
                "ava": "^0.17.0",
                "coveralls": "^2.11.4",
                "form-data": "^2.1.1",
                "get-port": "^2.0.0",
                "into-stream": "^3.0.0",
                "nyc": "^10.0.0",
                "pem": "^1.4.4",
                "pify": "^2.3.0",
                "tempfile": "^1.1.1",
                "xo": "*"
            },
            "releases": [{
                "from": "2016-12-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 2
            }, {
                "from": "2016-10-14T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 8
            }, {
                "from": "2016-07-16T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 9
            }, {
                "from": "2016-01-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 22
            }, {
                "from": "2015-01-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 53
            }],
            "hasTestScript": true,
            "hasSelectiveFiles": true,
            "readme": "<h1 align=\"center\">\n\t<br>\n\t<img width=\"360\" src=\"https://rawgit.com/sindresorhus/got/master/media/logo.svg\" alt=\"got\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Simplified HTTP requests\n\n[![Build Status](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master) [![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n\nA nicer interface to the built-in [`http`](http://nodejs.org/api/http.html) module.\n\nIt supports following redirects, promises, streams, retries, automagically handling gzip/deflate and some convenience options.\n\nCreated because [`request`](https://github.com/request/request) is bloated *(several megabytes!)*.\n\n\n## Install\n\n**WARNING: Node.js 4 or higher is required for got@6 and above.** For older Node.js versions use [got@5](https://github.com/sindresorhus/got/tree/v5.x).\n\n```\n$ npm install --save got\n```\n\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst got = require('got');\n\ngot('todomvc.com')\n\t.then(response => {\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t})\n\t.catch(error => {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t});\n\n// Streams\ngot.stream('todomvc.com').pipe(fs.createWriteStream('index.html'));\n\n// For POST, PUT and PATCH methods got.stream returns a WritableStream\nfs.createReadStream('index.html').pipe(got.stream.post('todomvc.com'));\n```\n\n\n### API\n\nIt's a `GET` request by default, but can be changed in `options`.\n\n#### got(url, [options])\n\nReturns a Promise for a `response` object with a `body` property, a `url` property with the request URL or the final URL after redirects, and a `requestUrl` property with the original request URL.\n\n##### url\n\nType: `string`, `object`\n\nThe URL to request or a [`http.request` options](https://nodejs.org/api/http.html#http_http_request_options_callback) object.\n\nProperties from `options` will override properties in the parsed `url`.\n\n##### options\n\nType: `object`\n\nAny of the [`http.request`](http://nodejs.org/api/http.html#http_http_request_options_callback) options.\n\n###### body\n\nType: `string`, `buffer`, `readableStream`, `object`\n\n*This is mutually exclusive with stream mode.*\n\nBody that will be sent with a `POST` request.\n\nIf present in `options` and `options.method` is not set, `options.method` will be set to `POST`.\n\nIf `content-length` or `transfer-encoding` is not set in `options.headers` and `body` is a string or buffer, `content-length` will be set to the body length.\n\nIf `body` is a plain object, it will be stringified with [`querystring.stringify`](https://nodejs.org/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) and sent as `application/x-www-form-urlencoded`.\n\n###### encoding\n\nType: `string`, `null`<br>\nDefault: `'utf8'`\n\nEncoding to be used on `setEncoding` of the response data. If `null`, the body is returned as a Buffer.\n\n###### json\n\nType: `boolean`<br>\nDefault: `false`\n\n*This is mutually exclusive with stream mode.*\n\nParse response body with `JSON.parse` and set `accept` header to `application/json`.\n\n###### query\n\nType: `string`, `object`<br>\n\nQuery string object that will be added to the request URL. This will override the query string in `url`.\n\n###### timeout\n\nType: `number`, `object`\n\nMilliseconds to wait for a server to send response headers before aborting request with `ETIMEDOUT` error.\n\nOption accepts `object` with separate `connect` and `socket` fields for connection and socket inactivity timeouts.\n\n###### retries\n\nType: `number`, `function`<br>\nDefault: `5`\n\nNumber of request retries when network errors happens. Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 0).\n\nOption accepts `function` with `retry` and `error` arguments. Function must return delay in milliseconds (`0` return value cancels retry).\n\n**Note:** if `retries` is `number`, `ENOTFOUND` and `ENETUNREACH` error will not be retried (see full list in [`is-retry-allowed`](https://github.com/floatdrop/is-retry-allowed/blob/master/index.js#L12) module).\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\n\n#### Streams\n\n#### got.stream(url, [options])\n\n`stream` method will return Duplex stream with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip**: You can use `request` event to abort request:\n\n```js\ngot.stream('github.com')\n\t.on('request', req => setTimeout(() => req.abort(), 50));\n```\n\n##### .on('response', response)\n\n`response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\n`redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('error', error, body, response)\n\n`error` event emitted in case of protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n\n## Errors\n\nEach error contains (if available) `statusCode`, `statusMessage`, `host`, `hostname`, `method` and `path` properties to make debugging easier.\n\nIn Promise mode, the `response` is attached to the error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen `json` option is enabled and `JSON.parse` fails.\n\n#### got.HTTPError\n\nWhen server response code is not 2xx. Contains `statusCode` and `statusMessage`.\n\n#### got.MaxRedirectsError\n\nWhen server redirects you more than 10 times.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) module with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('todomvc.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\n\n## Cookies\n\nYou can use the [`cookie`](https://github.com/jshttp/cookie) module to include cookies in a request:\n\n```js\nconst got = require('got');\nconst cookie = require('cookie');\n\ngot('google.com', {\n\theaders: {\n\t\tcookie: cookie.serialize('foo', 'bar')\n\t}\n});\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) module to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('google.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) module to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tjson: true\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - absolute path to a unix domain socket, e.g. `/var/run/docker.sock`\n- `PATH` - request path, e.g. `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// or without protocol (http by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## Tip\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('todomvc.com', {\n\theaders: {\n\t\t'user-agent': `my-module/${pkg.version} (https://github.com/username/my-module)`\n\t}\n});\n```\n\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Convenience wrapper for interacting with the GitHub API\n- [travis-got](https://github.com/samverschueren/travis-got) - Convenience wrapper for interacting with the Travis API\n\n\n## Created by\n\n[![Sindre Sorhus](https://avatars.githubusercontent.com/u/170270?v=3&s=100)](https://sindresorhus.com) | [![Vsevolod Strukchinsky](https://avatars.githubusercontent.com/u/365089?v=3&s=100)](https://github.com/floatdrop)\n---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)"
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-11T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 170406
            }, {
                "from": "2017-01-05T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 875650
            }, {
                "from": "2016-12-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 3255336
            }, {
                "from": "2016-10-14T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 10145778
            }, {
                "from": "2016-07-16T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 18949614
            }, {
                "from": "2016-01-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 34120068
            }],
            "dependentsCount": 635,
            "starsCount": 68
        },
        "github": {
            "starsCount": 1402,
            "forksCount": 74,
            "subscribersCount": 26,
            "issues": {
                "count": 261,
                "openCount": 23,
                "distribution": {
                    "3600": 56,
                    "10800": 25,
                    "32400": 27,
                    "97200": 42,
                    "291600": 24,
                    "874800": 20,
                    "2624400": 22,
                    "7873200": 30,
                    "23619600": 8,
                    "70858800": 7,
                    "212576400": 0
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "floatdrop",
                "commitsCount": 221
            }, {
                "username": "sindresorhus",
                "commitsCount": 106
            }, {
                "username": "kevva",
                "commitsCount": 10
            }, {
                "username": "julien-f",
                "commitsCount": 3
            }, {
                "username": "f0rmat1k",
                "commitsCount": 2
            }, {
                "username": "luanmuniz",
                "commitsCount": 2
            }, {
                "username": "thisconnect",
                "commitsCount": 2
            }, {
                "username": "km256",
                "commitsCount": 1
            }, {
                "username": "connyay",
                "commitsCount": 1
            }, {
                "username": "vadimdemedes",
                "commitsCount": 1
            }, {
                "username": "SamVerschueren",
                "commitsCount": 1
            }, {
                "username": "stevemao",
                "commitsCount": 1
            }, {
                "username": "ntwb",
                "commitsCount": 1
            }, {
                "username": "bem-robot",
                "commitsCount": 1
            }, {
                "username": "lpinca",
                "commitsCount": 1
            }, {
                "username": "satazor",
                "commitsCount": 1
            }, {
                "username": "ruyadorno",
                "commitsCount": 1
            }, {
                "username": "Rowno",
                "commitsCount": 1
            }, {
                "username": "DylanPiercey",
                "commitsCount": 1
            }, {
                "username": "bisubus",
                "commitsCount": 1
            }, {
                "username": "reconbot",
                "commitsCount": 1
            }, {
                "username": "tommytroylin",
                "commitsCount": 1
            }, {
                "username": "ReklatsMasters",
                "commitsCount": 1
            }, {
                "username": "AlexTes",
                "commitsCount": 1
            }, {
                "username": "MarkHerhold",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-05T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 8
            }, {
                "from": "2016-10-14T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 29
            }, {
                "from": "2016-07-16T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 41
            }, {
                "from": "2016-01-13T00:00:00.000Z",
                "to": "2017-01-12T00:00:00.000Z",
                "count": 72
            }],
            "statuses": [{
                "context": "coverage/coveralls",
                "state": "success"
            }, {
                "context": "continuous-integration/travis-ci/push",
                "state": "success"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 9431,
                "testsSize": 26286
            },
            "repositorySize": 418051,
            "linters": {
                "general": ["editorconfig"]
            },
            "coverage": 1,
            "badges": [{
                "urls": {
                    "original": "https://travis-ci.org/sindresorhus/got.svg?branch=master",
                    "service": "https://api.travis-ci.org/sindresorhus/got.svg?branch=master",
                    "shields": "https://img.shields.io/travis/sindresorhus/got/master.svg",
                    "content": "https://img.shields.io/travis/sindresorhus/got/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master",
                    "service": "https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master",
                    "shields": "https://img.shields.io/coveralls/sindresorhus/got/master.svg",
                    "content": "https://img.shields.io/coveralls/sindresorhus/got/master.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/npm/dm/got.svg",
                    "shields": "https://img.shields.io/npm/dm/got.svg",
                    "content": "https://img.shields.io/npm/dm/got.json"
                },
                "info": {
                    "service": "npm",
                    "type": "downloads",
                    "modifiers": {
                        "type": "dm"
                    }
                }
            }],
            "outdatedDependencies": {
                "unzip-response": {
                    "required": "^2.0.1",
                    "stable": "2.0.1",
                    "latest": "1.0.2"
                }
            }
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9199999999999999,
            "tests": 1,
            "health": 0.8181818181818181,
            "branding": 0.44999999999999996
        },
        "popularity": {
            "communityInterest": 1595,
            "downloadsCount": 3381926,
            "downloadsAcceleration": 6706.889155251138,
            "dependentsCount": 635
        },
        "maintenance": {
            "releasesFrequency": 1,
            "commitsFrequency": 0.9411712328767123,
            "openIssues": 1,
            "issuesDistribution": 0.880089854829079
        }
    },
    "score": {
        "final": 0.8827714848130603,
        "detail": {
            "quality": 0.9860167387010409,
            "popularity": 0.6772127844310527,
            "maintenance": 0.9998342532910847
        }
    }
}, {
    "analyzedAt": "2017-01-21T13:11:33.590Z",
    "collected": {
        "metadata": {
            "name": "request",
            "version": "2.79.0",
            "description": "Simplified HTTP request client.",
            "date": "2016-11-18T17:21:08.710Z",
            "author": {
                "name": "Mikeal Rogers",
                "email": "mikeal.rogers@gmail.com",
                "username": "mikeal"
            },
            "publisher": {
                "username": "simov",
                "email": "simeonvelichkov@gmail.com"
            },
            "maintainers": [{
                "username": "mikeal",
                "email": "mikeal.rogers@gmail.com"
            }, {
                "username": "nylen",
                "email": "jnylen@gmail.com"
            }, {
                "username": "fredkschott",
                "email": "fkschott@gmail.com"
            }, {
                "username": "simov",
                "email": "simeonvelichkov@gmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git+https://github.com/request/request.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/request",
                "homepage": "https://github.com/request/request#readme",
                "repository": "https://github.com/request/request",
                "bugs": "http://github.com/request/request/issues"
            },
            "license": "Apache-2.0",
            "dependencies": {
                "aws-sign2": "~0.6.0",
                "aws4": "^1.2.1",
                "caseless": "~0.11.0",
                "combined-stream": "~1.0.5",
                "extend": "~3.0.0",
                "forever-agent": "~0.6.1",
                "form-data": "~2.1.1",
                "har-validator": "~2.0.6",
                "hawk": "~3.1.3",
                "http-signature": "~1.1.0",
                "is-typedarray": "~1.0.0",
                "isstream": "~0.1.2",
                "json-stringify-safe": "~5.0.1",
                "mime-types": "~2.1.7",
                "oauth-sign": "~0.8.1",
                "qs": "~6.3.0",
                "stringstream": "~0.0.4",
                "tough-cookie": "~2.3.0",
                "tunnel-agent": "~0.4.1",
                "uuid": "^3.0.0"
            },
            "devDependencies": {
                "bluebird": "^3.2.1",
                "browserify": "^13.0.1",
                "browserify-istanbul": "^2.0.0",
                "buffer-equal": "^1.0.0",
                "codecov": "^1.0.1",
                "coveralls": "^2.11.4",
                "eslint": "^2.5.3",
                "function-bind": "^1.0.2",
                "istanbul": "^0.4.0",
                "karma": "^1.1.1",
                "karma-browserify": "^5.0.1",
                "karma-cli": "^1.0.0",
                "karma-coverage": "^1.0.0",
                "karma-phantomjs-launcher": "^1.0.0",
                "karma-tap": "^3.0.1",
                "phantomjs-prebuilt": "^2.1.3",
                "rimraf": "^2.2.8",
                "server-destroy": "^1.0.1",
                "tape": "^4.6.0",
                "taper": "^0.5.0"
            },
            "releases": [{
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 4
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 5
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 12
            }, {
                "from": "2015-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 28
            }],
            "hasTestScript": true,
            "hasSelectiveFiles": true,
            "readme": "# Request - Simplified HTTP client\n\n[![npm package](https://nodei.co/npm/request.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/request/)\n\n[![Build status](https://img.shields.io/travis/request/request/master.svg?style=flat-square)](https://travis-ci.org/request/request)\n[![Coverage](https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square)](https://codecov.io/github/request/request?branch=master)\n[![Coverage](https://img.shields.io/coveralls/request/request.svg?style=flat-square)](https://coveralls.io/r/request/request)\n[![Dependency Status](https://img.shields.io/david/request/request.svg?style=flat-square)](https://david-dm.org/request/request)\n[![Known Vulnerabilities](https://snyk.io/test/npm/request/badge.svg?style=flat-square)](https://snyk.io/test/npm/request)\n[![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square)](https://gitter.im/request/request?utm_source=badge)\n\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```js\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Show the HTML for the Google homepage.\n  }\n})\n```\n\n\n## Table of contents\n\n- [Streaming](#streaming)\n- [Forms](#forms)\n- [HTTP Authentication](#http-authentication)\n- [Custom HTTP Headers](#custom-http-headers)\n- [OAuth Signing](#oauth-signing)\n- [Proxies](#proxies)\n- [Unix Domain Sockets](#unix-domain-sockets)\n- [TLS/SSL Protocol](#tlsssl-protocol)\n- [Support for HAR 1.2](#support-for-har-12)\n- [**All Available Options**](#requestoptions-callback)\n\nRequest also offers [convenience methods](#convenience-methods) like\n`request.defaults` and `request.post`, and there are\nlots of [usage examples](#examples) and several\n[debugging techniques](#debugging).\n\n\n---\n\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```js\nrequest('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers don’t already provide one).\n\n```js\nfs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))\n```\n\nRequest can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers.\n\n```js\nrequest.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png'))\n```\n\nRequest emits a \"response\" event when a response is received. The `response` argument will be an instance of [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage).\n\n```js\nrequest\n  .get('http://google.com/img.png')\n  .on('response', function(response) {\n    console.log(response.statusCode) // 200\n    console.log(response.headers['content-type']) // 'image/png'\n  })\n  .pipe(request.put('http://mysite.com/img.png'))\n```\n\nTo easily handle errors when streaming requests, listen to the `error` event before piping:\n\n```js\nrequest\n  .get('http://mysite.com/doodle.png')\n  .on('error', function(err) {\n    console.log(err)\n  })\n  .pipe(fs.createWriteStream('doodle.png'))\n```\n\nNow let’s get fancy.\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    if (req.method === 'PUT') {\n      req.pipe(request.put('http://mysite.com/doodle.png'))\n    } else if (req.method === 'GET' || req.method === 'HEAD') {\n      request.get('http://mysite.com/doodle.png').pipe(resp)\n    }\n  }\n})\n```\n\nYou can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do:\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    var x = request('http://mysite.com/doodle.png')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since `pipe()` returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :)\n\n```js\nreq.pipe(request('http://mysite.com/doodle.png')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```js\nvar r = request.defaults({'proxy':'http://localproxy.com'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    r.get('http://google.com/doodle.png').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\n\n#### application/x-www-form-urlencoded (URL-Encoded Forms)\n\nURL-encoded forms are simple.\n\n```js\nrequest.post('http://service.com/upload', {form:{key:'value'}})\n// or\nrequest.post('http://service.com/upload').form({key:'value'})\n// or\nrequest.post({url:'http://service.com/upload', form: {key:'value'}}, function(err,httpResponse,body){ /* ... */ })\n```\n\n\n#### multipart/form-data (Multipart Form Uploads)\n\nFor `multipart/form-data` we use the [form-data](https://github.com/form-data/form-data) library by [@felixge](https://github.com/felixge). For the most cases, you can pass your upload form data via the `formData` option.\n\n\n```js\nvar formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: new Buffer([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});\n```\n\nFor advanced cases, you can access the form-data object itself via `r.form()`. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling `form()` will clear the currently set form data for that request.)\n\n```js\n// NOTE: Advanced use-case, for normal use see 'formData' usage above\nvar r = request.post('http://service.com/upload', function optionalCallback(err, httpResponse, body) {...})\nvar form = r.form();\nform.append('my_field', 'my_value');\nform.append('my_buffer', new Buffer([1, 2, 3]));\nform.append('custom_file', fs.createReadStream(__dirname + '/unicycle.jpg'), {filename: 'unicycle.jpg'});\n```\nSee the [form-data README](https://github.com/form-data/form-data) for more information & examples.\n\n\n#### multipart/related\n\nSome variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a `multipart/related` request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as `true` to your request options.\n\n```js\n  request({\n    method: 'PUT',\n    preambleCRLF: true,\n    postambleCRLF: true,\n    uri: 'http://service.com/upload',\n    multipart: [\n      {\n        'content-type': 'application/json',\n        body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n      },\n      { body: 'I am an attachment' },\n      { body: fs.createReadStream('image.png') }\n    ],\n    // alternatively pass an object containing additional options\n    multipart: {\n      chunked: false,\n      data: [\n        {\n          'content-type': 'application/json',\n          body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        },\n        { body: 'I am an attachment' }\n      ]\n    }\n  },\n  function (error, response, body) {\n    if (error) {\n      return console.error('upload failed:', error);\n    }\n    console.log('Upload successful!  Server responded with:', body);\n  })\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## HTTP Authentication\n\n```js\nrequest.get('http://some.server.com/').auth('username', 'password', false);\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'user': 'username',\n    'pass': 'password',\n    'sendImmediately': false\n  }\n});\n// or\nrequest.get('http://some.server.com/').auth(null, null, true, 'bearerToken');\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'bearer': 'bearerToken'\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values:\n\n- `user` || `username`\n- `pass` || `password`\n- `sendImmediately` (optional)\n- `bearer` (optional)\n\nThe method form takes parameters\n`auth(username, password, sendImmediately, bearer)`.\n\n`sendImmediately` defaults to `true`, which causes a basic or bearer\nauthentication header to be sent.  If `sendImmediately` is `false`, then\n`request` will retry with a proper authentication header after receiving a\n`401` response from the server (which must contain a `WWW-Authenticate` header\nindicating the required authentication method).\n\nNote that you can also specify basic authentication using the URL itself, as\ndetailed in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt).  Simply pass the\n`user:password` before the host with an `@` sign:\n\n```js\nvar username = 'username',\n    password = 'password',\n    url = 'http://' + username + ':' + password + '@some.server.com';\n\nrequest({url: url}, function (error, response, body) {\n   // Do more stuff with 'body' here\n});\n```\n\nDigest authentication is supported, but it only works with `sendImmediately`\nset to `false`; otherwise `request` will send basic authentication on the\ninitial request, which will probably cause the request to fail.\n\nBearer authentication is supported, and is activated when the `bearer` value is\navailable. The value may be either a `String` or a `Function` returning a\n`String`. Using a function to supply the bearer token is particularly useful if\nused in conjunction with `defaults` to allow a single function to supply the\nlast known token at the time of sending a request, or to compute one on the fly.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Custom HTTP Headers\n\nHTTP Headers, such as `User-Agent`, can be set in the `options` object.\nIn the example below, we call the github API to find out the number\nof stars and forks for the request repository. This requires a\ncustom `User-Agent` header as well as https.\n\n```js\nvar request = require('request');\n\nvar options = {\n  url: 'https://api.github.com/repos/request/request',\n  headers: {\n    'User-Agent': 'request'\n  }\n};\n\nfunction callback(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    var info = JSON.parse(body);\n    console.log(info.stargazers_count + \" Stars\");\n    console.log(info.forks_count + \" Forks\");\n  }\n}\n\nrequest(options, callback);\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## OAuth Signing\n\n[OAuth version 1.0](https://tools.ietf.org/html/rfc5849) is supported.  The\ndefault signing algorithm is\n[HMAC-SHA1](https://tools.ietf.org/html/rfc5849#section-3.4.2):\n\n```js\n// OAuth1.0 - 3-legged server side flow (Twitter example)\n// step 1\nvar qs = require('querystring')\n  , oauth =\n    { callback: 'http://mysite.com/callback/'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = 'https://api.twitter.com/oauth/request_token'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has\n  // verified with twitter that they are authorizing your app.\n\n  // step 2\n  var req_data = qs.parse(body)\n  var uri = 'https://api.twitter.com/oauth/authenticate'\n    + '?' + qs.stringify({oauth_token: req_data.oauth_token})\n  // redirect the user to the authorize uri\n\n  // step 3\n  // after the user is redirected back to your server\n  var auth_data = qs.parse(body)\n    , oauth =\n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: auth_data.oauth_token\n      , token_secret: req_data.oauth_token_secret\n      , verifier: auth_data.oauth_verifier\n      }\n    , url = 'https://api.twitter.com/oauth/access_token'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    // ready to make signed requests on behalf of the user\n    var perm_data = qs.parse(body)\n      , oauth =\n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_data.oauth_token\n        , token_secret: perm_data.oauth_token_secret\n        }\n      , url = 'https://api.twitter.com/1.1/users/show.json'\n      , qs =\n        { screen_name: perm_data.screen_name\n        , user_id: perm_data.user_id\n        }\n      ;\n    request.get({url:url, oauth:oauth, qs:qs, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\nFor [RSA-SHA1 signing](https://tools.ietf.org/html/rfc5849#section-3.4.3), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'RSA-SHA1'`\n* Instead of `consumer_secret`, specify a `private_key` string in\n  [PEM format](http://how2ssl.com/articles/working_with_pem_files/)\n\nFor [PLAINTEXT signing](http://oauth.net/core/1.0/#anchor22), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'PLAINTEXT'`\n\nTo send OAuth parameters via query params or in a post body as described in The\n[Consumer Request Parameters](http://oauth.net/core/1.0/#consumer_req_param)\nsection of the oauth1 spec:\n* Pass `transport_method : 'query'` or `transport_method : 'body'` in the OAuth\n  options object.\n* `transport_method` defaults to `'header'`\n\nTo use [Request Body Hash](https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html) you can either\n* Manually generate the body hash and pass it as a string `body_hash: '...'`\n* Automatically generate the body hash by passing `body_hash: true`\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Proxies\n\nIf you specify a `proxy` option, then the request (and any subsequent\nredirects) will be sent via a connection to the proxy server.\n\nIf your endpoint is an `https` url, and you are using a proxy, then\nrequest will send a `CONNECT` request to the proxy server *first*, and\nthen use the supplied connection to connect to the endpoint.\n\nThat is, first it will make a request like:\n\n```\nHTTP/1.1 CONNECT endpoint-server.com:80\nHost: proxy-server.com\nUser-Agent: whatever user agent you specify\n```\n\nand then the proxy server make a TCP connection to `endpoint-server`\non port `80`, and return a response that looks like:\n\n```\nHTTP/1.1 200 OK\n```\n\nAt this point, the connection is left open, and the client is\ncommunicating directly with the `endpoint-server.com` machine.\n\nSee [the wikipedia page on HTTP Tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel)\nfor more information.\n\nBy default, when proxying `http` traffic, request will simply make a\nstandard proxied `http` request.  This is done by making the `url`\nsection of the initial line of the request a fully qualified url to\nthe endpoint.\n\nFor example, it will make a single request that looks like:\n\n```\nHTTP/1.1 GET http://endpoint-server.com/some-url\nHost: proxy-server.com\nOther-Headers: all go here\n\nrequest body or whatever\n```\n\nBecause a pure \"http over http\" tunnel offers no additional security\nor other features, it is generally simpler to go with a\nstraightforward HTTP proxy in this case.  However, if you would like\nto force a tunneling proxy, you may set the `tunnel` option to `true`.\n\nYou can also make a standard proxied `http` request by explicitly setting\n`tunnel : false`, but **note that this will allow the proxy to see the traffic\nto/from the destination server**.\n\nIf you are using a tunneling proxy, you may set the\n`proxyHeaderWhiteList` to share certain headers with the proxy.\n\nYou can also set the `proxyHeaderExclusiveList` to share certain\nheaders only with the proxy and not with destination host.\n\nBy default, this set is:\n\n```\naccept\naccept-charset\naccept-encoding\naccept-language\naccept-ranges\ncache-control\ncontent-encoding\ncontent-language\ncontent-length\ncontent-location\ncontent-md5\ncontent-range\ncontent-type\nconnection\ndate\nexpect\nmax-forwards\npragma\nproxy-authorization\nreferer\nte\ntransfer-encoding\nuser-agent\nvia\n```\n\nNote that, when using a tunneling proxy, the `proxy-authorization`\nheader and any headers from custom `proxyHeaderExclusiveList` are\n*never* sent to the endpoint server, but only to the proxy server.\n\n\n### Controlling proxy behaviour using environment variables\n\nThe following environment variables are respected by `request`:\n\n * `HTTP_PROXY` / `http_proxy`\n * `HTTPS_PROXY` / `https_proxy`\n * `NO_PROXY` / `no_proxy`\n\nWhen `HTTP_PROXY` / `http_proxy` are set, they will be used to proxy non-SSL requests that do not have an explicit `proxy` configuration option present. Similarly, `HTTPS_PROXY` / `https_proxy` will be respected for SSL requests that do not have an explicit `proxy` configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the `proxy` configuration option. Furthermore, the `proxy` configuration option can be explicitly set to false / null to opt out of proxying altogether for that request.\n\n`request` is also aware of the `NO_PROXY`/`no_proxy` environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to `*` to opt out of the implicit proxy configuration of the other environment variables.\n\nHere's some examples of valid `no_proxy` values:\n\n * `google.com` - don't proxy HTTP/HTTPS requests to Google.\n * `google.com:443` - don't proxy HTTPS requests to Google, but *do* proxy HTTP requests to Google.\n * `google.com:443, yahoo.com:80` - don't proxy HTTPS requests to Google, and don't proxy HTTP requests to Yahoo!\n * `*` - ignore `https_proxy`/`http_proxy` environment variables altogether.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## UNIX Domain Sockets\n\n`request` supports making requests to [UNIX Domain Sockets](https://en.wikipedia.org/wiki/Unix_domain_socket). To make one, use the following URL scheme:\n\n```js\n/* Pattern */ 'http://unix:SOCKET:PATH'\n/* Example */ request.get('http://unix:/absolute/path/to/unix.socket:/request/path')\n```\n\nNote: The `SOCKET` path is assumed to be absolute to the root of the host file system.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## TLS/SSL Protocol\n\nTLS/SSL Protocol options, such as `cert`, `key` and `passphrase`, can be\nset directly in `options` object, in the `agentOptions` property of the `options` object, or even in `https.globalAgent.options`. Keep in mind that, although `agentOptions` allows for a slightly wider range of configurations, the recommended way is via `options` object directly, as using `agentOptions` or `https.globalAgent.options` would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent).\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , caFile = path.resolve(__dirname, 'ssl/ca.cert.pem')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    cert: fs.readFileSync(certFile),\n    key: fs.readFileSync(keyFile),\n    passphrase: 'password',\n    ca: fs.readFileSync(caFile)\n};\n\nrequest.get(options);\n```\n\n### Using `options.agentOptions`\n\nIn the example below, we call an API requires client side SSL certificate\n(in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol:\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        cert: fs.readFileSync(certFile),\n        key: fs.readFileSync(keyFile),\n        // Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format:\n        // pfx: fs.readFileSync(pfxFilePath),\n        passphrase: 'password',\n        securityOptions: 'SSL_OP_NO_SSLv3'\n    }\n};\n\nrequest.get(options);\n```\n\nIt is able to force using SSLv3 only by specifying `secureProtocol`:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        secureProtocol: 'SSLv3_method'\n    }\n});\n```\n\nIt is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs).\nThis can be useful, for example,  when using self-signed certificates.\nTo require a different root certificate, you can specify the signing CA by adding the contents of the CA's certificate file to the `agentOptions`.\nThe certificate the domain presents must be signed by the root certificate specified:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        ca: fs.readFileSync('ca.cert.pem')\n    }\n});\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Support for HAR 1.2\n\nThe `options.har` property will override the values: `url`, `method`, `qs`, `headers`, `form`, `formData`, `body`, `json`, as well as construct multipart data and read files from disk when `request.postData.params[].fileName` is present without a matching `value`.\n\na validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching.\n\n```js\n  var request = require('request')\n  request({\n    // will be ignored\n    method: 'GET',\n    uri: 'http://www.google.com',\n\n    // HTTP Archive Request Object\n    har: {\n      url: 'http://www.mockbin.com/har',\n      method: 'POST',\n      headers: [\n        {\n          name: 'content-type',\n          value: 'application/x-www-form-urlencoded'\n        }\n      ],\n      postData: {\n        mimeType: 'application/x-www-form-urlencoded',\n        params: [\n          {\n            name: 'foo',\n            value: 'bar'\n          },\n          {\n            name: 'hello',\n            value: 'world'\n          }\n        ]\n      }\n    }\n  })\n\n  // a POST request will be sent to http://www.mockbin.com\n  // with body an application/x-www-form-urlencoded body:\n  // foo=bar&hello=world\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## request(options, callback)\n\nThe first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional.\n\n- `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()`\n- `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain.  If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. When `baseUrl` is given, `uri` must also be a string.\n- `method` - http method (default: `\"GET\"`)\n- `headers` - http headers (default: `{}`)\n\n---\n\n- `qs` - object containing querystring values to be appended to the `uri`\n- `qsParseOptions` - object containing options to pass to the [qs.parse](https://github.com/hapijs/qs#parsing-objects) method. Alternatively pass options to the [querystring.parse](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`\n- `qsStringifyOptions` - object containing options to pass to the [qs.stringify](https://github.com/hapijs/qs#stringifying) method. Alternatively pass options to the  [querystring.stringify](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`. For example, to change the way arrays are converted to query strings using the `qs` module pass the `arrayFormat` option with one of `indices|brackets|repeat`\n- `useQuerystring` - If true, use `querystring` to stringify and parse\n  querystrings, otherwise use `qs` (default: `false`).  Set this option to\n  `true` if you need arrays to be serialized as `foo=bar&foo=baz` instead of the\n  default `foo[0]=bar&foo[1]=baz`.\n\n---\n\n- `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer`, `String` or `ReadStream`. If `json` is `true`, then `body` must be a JSON-serializable object.\n- `form` - when passed an object or a querystring, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded` header. When passed no options, a `FormData` instance is returned (and is piped to request). See \"Forms\" section above.\n- `formData` - Data to pass for a `multipart/form-data` request. See\n  [Forms](#forms) section above.\n- `multipart` - array of objects which contain their own headers and `body`\n  attributes. Sends a `multipart/related` request. See [Forms](#forms) section\n  above.\n  - Alternatively you can pass in an object `{chunked: false, data: []}` where\n    `chunked` is used to specify whether the request is sent in\n    [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)\n    In non-chunked requests, data items with body streams are not allowed.\n- `preambleCRLF` - append a newline/CRLF before the boundary of your `multipart/form-data` request.\n- `postambleCRLF` - append a newline/CRLF at the end of the boundary of your `multipart/form-data` request.\n- `json` - sets `body` to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as JSON.\n- `jsonReviver` - a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that will be passed to `JSON.parse()` when parsing a JSON response body.\n- `jsonReplacer` - a [replacer function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) that will be passed to `JSON.stringify()` when stringifying a JSON request body.\n\n---\n\n- `auth` - A hash containing values `user` || `username`, `pass` || `password`, and `sendImmediately` (optional).  See documentation above.\n- `oauth` - Options for OAuth HMAC-SHA1 signing. See documentation above.\n- `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n- `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`, and optionally `session` (note that this only works for services that require session as part of the canonical string). Also requires the property `bucket`, unless you’re specifying your `bucket` as part of the path, or the request doesn’t use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. **Note:** you need to `npm install aws4` first.\n- `httpSignature` - Options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\n\n---\n\n- `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`). This property can also be implemented as function which gets `response` object as a single argument and should return `true` if redirects should continue or `false` otherwise.\n- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`)\n- `followOriginalHttpMethod` - by default we redirect to HTTP method GET. you can enable this property to redirect to the original HTTP method (default: `false`)\n- `maxRedirects` - the maximum number of redirects to follow (default: `10`)\n- `removeRefererHeader` - removes the referer header when a redirect happens (default: `false`). **Note:** if true, referer header set in the initial request is preserved during redirect chain.\n\n---\n\n- `encoding` - Encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`. Anything else **(including the default value of `undefined`)** will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` (meaning this is effectively `utf8` by default). (**Note:** if you expect binary data, you should set `encoding: null`.)\n- `gzip` - If `true`, add an `Accept-Encoding` header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response.  **Note:** Automatic decoding of the response content is performed on the body data returned through `request` (both through the `request` stream and passed to the callback function) but is not performed on the `response` stream (available from the `response` event) which is the unmodified `http.IncomingMessage` object which may contain compressed data. See example below.\n- `jar` - If `true`, remember cookies for future use (or define your custom cookie jar; see examples section)\n\n---\n\n- `agent` - `http(s).Agent` instance to use\n- `agentClass` - alternatively specify your agent's class name\n- `agentOptions` - and pass its options. **Note:** for HTTPS see [tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) and the [documentation above](#using-optionsagentoptions).\n- `forever` - set to `true` to use the [forever-agent](https://github.com/request/forever-agent) **Note:** Defaults to `http(s).Agent({keepAlive:true})` in node 0.12+\n- `pool` - An object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. **Note:** `pool` is used only when the `agent` option is not specified.\n  - A `maxSockets` property can also be provided on the `pool` object to set the max number of sockets for all agents created (ex: `pool: {maxSockets: Infinity}`).\n  - Note that if you are sending multiple requests in a loop and creating\n    multiple new `pool` objects, `maxSockets` will not work as intended.  To\n    work around this, either use [`request.defaults`](#requestdefaultsoptions)\n    with your pool options or create the pool object with the `maxSockets`\n    property outside of the loop.\n- `timeout` - Integer containing the number of milliseconds to wait for a\nserver to send response headers (and start the response body) before aborting\nthe request. Note that if the underlying TCP connection cannot be established,\nthe OS-wide TCP connection timeout will overrule the `timeout` option ([the\ndefault in Linux can be anywhere from 20-120 seconds][linux-timeout]).\n\n[linux-timeout]: http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout\n\n---\n\n- `localAddress` - Local interface to bind for network connections.\n- `proxy` - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)\n- `strictSSL` - If `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.\n- `tunnel` - controls the behavior of\n  [HTTP `CONNECT` tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling)\n  as follows:\n   - `undefined` (default) - `true` if the destination is `https`, `false` otherwise\n   - `true` - always tunnel to the destination by making a `CONNECT` request to\n     the proxy\n   - `false` - request the destination as a `GET` request.\n- `proxyHeaderWhiteList` - A whitelist of headers to send to a\n  tunneling proxy.\n- `proxyHeaderExclusiveList` - A whitelist of headers to send\n  exclusively to a tunneling proxy and not to destination.\n\n---\n\n- `time` - If `true`, the request-response cycle (including all redirects) is timed at millisecond resolution, and the result provided on the response's `elapsedTime` property. The `responseStartTime` property is also available to indicate the timestamp when the response begins.\n- `har` - A [HAR 1.2 Request Object](http://www.softwareishard.com/blog/har-12-spec/#request), will be processed from HAR format into options overwriting matching values *(see the [HAR 1.2 section](#support-for-har-1.2) for details)*\n- `callback` - alternatively pass the request's callback in the options object\n\nThe callback argument gets 3 arguments:\n\n1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object)\n2. An [`http.IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object\n3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied)\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n\n### request.defaults(options)\n\nThis method **returns a wrapper** around the normal request API that defaults\nto whatever options you pass to it.\n\n**Note:** `request.defaults()` **does not** modify the global request API;\ninstead, it **returns a wrapper** that has your default settings applied to it.\n\n**Note:** You can call `.defaults()` on the wrapper that is returned from\n`request.defaults` to add/override defaults that were previously defaulted.\n\nFor example:\n```js\n//requests using baseRequest() will set the 'x-token' header\nvar baseRequest = request.defaults({\n  headers: {'x-token': 'my-token'}\n})\n\n//requests using specialRequest() will include the 'x-token' header set in\n//baseRequest and will also include the 'special' header\nvar specialRequest = baseRequest.defaults({\n  headers: {special: 'special value'}\n})\n```\n\n### request.put\n\nSame as `request()`, but defaults to `method: \"PUT\"`.\n\n```js\nrequest.put(url)\n```\n\n### request.patch\n\nSame as `request()`, but defaults to `method: \"PATCH\"`.\n\n```js\nrequest.patch(url)\n```\n\n### request.post\n\nSame as `request()`, but defaults to `method: \"POST\"`.\n\n```js\nrequest.post(url)\n```\n\n### request.head\n\nSame as `request()`, but defaults to `method: \"HEAD\"`.\n\n```js\nrequest.head(url)\n```\n\n### request.del / request.delete\n\nSame as `request()`, but defaults to `method: \"DELETE\"`.\n\n```js\nrequest.del(url)\nrequest.delete(url)\n```\n\n### request.get\n\nSame as `request()` (for uniformity).\n\n```js\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```js\nrequest.cookie('key1=value1')\n```\n### request.jar()\n\nFunction that creates a new cookie jar.\n\n```js\nrequest.jar()\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Debugging\n\nThere are at least three ways to debug the operation of `request`:\n\n1. Launch the node process like `NODE_DEBUG=request node script.js`\n   (`lib,request,otherlib` works too).\n\n2. Set `require('request').debug = true` at any time (this does the same thing\n   as #1).\n\n3. Use the [request-debug module](https://github.com/request/request-debug) to\n   view request and response headers and bodies.\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Timeouts\n\nMost requests to external servers should have a timeout attached, in case the\nserver is not responding in a timely manner. Without a timeout, your code may\nhave a socket open/consume resources for minutes or more.\n\nThere are two main types of timeouts: **connection timeouts** and **read\ntimeouts**. A connect timeout occurs if the timeout is hit while your client is\nattempting to establish a connection to a remote machine (corresponding to the\n[connect() call][connect] on the socket). A read timeout occurs any time the\nserver is too slow to send back a part of the response.\n\nThese two situations have widely different implications for what went wrong\nwith the request, so it's useful to be able to distinguish them. You can detect\ntimeout errors by checking `err.code` for an 'ETIMEDOUT' value. Further, you\ncan detect whether the timeout was a connection timeout by checking if the\n`err.connect` property is set to `true`.\n\n```js\nrequest.get('http://10.255.255.1', {timeout: 1500}, function(err) {\n    console.log(err.code === 'ETIMEDOUT');\n    // Set to `true` if the timeout was a connection timeout, `false` or\n    // `undefined` otherwise.\n    console.log(err.connect === true);\n    process.exit(0);\n});\n```\n\n[connect]: http://linux.die.net/man/2/connect\n\n## Examples:\n\n```js\n  var request = require('request')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: 'PUT'\n    , uri: 'http://mikeal.iriscouch.com/testjs/' + rand\n    , multipart:\n      [ { 'content-type': 'application/json'\n        ,  body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        }\n      , { body: 'I am an attachment' }\n      ]\n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand)\n      } else {\n        console.log('error: '+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\n\nFor backwards-compatibility, response compression is not supported by default.\nTo accept gzip-compressed responses, set the `gzip` option to `true`.  Note\nthat the body data passed through `request` is automatically decompressed\nwhile the response object is unmodified and will contain compressed data if\nthe server sent a compressed response.\n\n```js\n  var request = require('request')\n  request(\n    { method: 'GET'\n    , uri: 'http://www.google.com'\n    , gzip: true\n    }\n  , function (error, response, body) {\n      // body is the decompressed response body\n      console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity'))\n      console.log('the decoded data is: ' + body)\n    }\n  ).on('data', function(data) {\n    // decompressed data as it is received\n    console.log('decoded chunk: ' + data)\n  })\n  .on('response', function(response) {\n    // unmodified http.IncomingMessage object\n    response.on('data', function(data) {\n      // compressed data as it is received\n      console.log('received ' + data.length + ' bytes of compressed data')\n    })\n  })\n```\n\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`).\n\n```js\nvar request = request.defaults({jar: true})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie jar (instead of `request`’s global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)\n\n```js\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nOR\n\n```js\nvar j = request.jar();\nvar cookie = request.cookie('key1=value1');\nvar url = 'http://www.google.com';\nj.setCookie(cookie, url);\nrequest({url: url, jar: j}, function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie store (such as a\n[`FileCookieStore`](https://github.com/mitsuru/tough-cookie-filestore)\nwhich supports saving to and restoring from JSON files), pass it as a parameter\nto `request.jar()`:\n\n```js\nvar FileCookieStore = require('tough-cookie-filestore');\n// NOTE - currently the 'cookies.json' file must already exist!\nvar j = request.jar(new FileCookieStore('cookies.json'));\nrequest = request.defaults({ jar : j })\nrequest('http://www.google.com', function() {\n  request('http://images.google.com')\n})\n```\n\nThe cookie store must be a\n[`tough-cookie`](https://github.com/SalesforceEng/tough-cookie)\nstore and it must support synchronous operations; see the\n[`CookieStore` API docs](https://github.com/SalesforceEng/tough-cookie#cookiestore-api)\nfor details.\n\nTo inspect your cookie jar after a request:\n\n```js\nvar j = request.jar()\nrequest({url: 'http://www.google.com', jar: j}, function () {\n  var cookie_string = j.getCookieString(url); // \"key1=value1; key2=value2; ...\"\n  var cookies = j.getCookies(url);\n  // [{key: 'key1', value: 'value1', domain: \"www.google.com\", ...}, ...]\n})\n```\n\n[back to top](#table-of-contents)"
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-20T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 774866
            }, {
                "from": "2017-01-14T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 4235638
            }, {
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 15860761
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 53517464
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 105960766
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 194946526
            }],
            "dependentsCount": 18404,
            "starsCount": 1058
        },
        "github": {
            "starsCount": 13993,
            "forksCount": 1726,
            "subscribersCount": 368,
            "issues": {
                "count": 2517,
                "openCount": 452,
                "distribution": {
                    "3600": 283,
                    "10800": 126,
                    "32400": 149,
                    "97200": 272,
                    "291600": 231,
                    "874800": 258,
                    "2624400": 211,
                    "7873200": 201,
                    "23619600": 292,
                    "70858800": 442,
                    "212576400": 52
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "mikeal",
                "commitsCount": 353
            }, {
                "username": "simov",
                "commitsCount": 237
            }, {
                "username": "nylen",
                "commitsCount": 168
            }, {
                "username": "greenkeeperio-bot",
                "commitsCount": 46
            }, {
                "username": "seanstrom",
                "commitsCount": 35
            }, {
                "username": "isaacs",
                "commitsCount": 31
            }, {
                "username": "eiriksm",
                "commitsCount": 21
            }, {
                "username": "mscdex",
                "commitsCount": 15
            }, {
                "username": "Turbo87",
                "commitsCount": 12
            }, {
                "username": "froatsnook",
                "commitsCount": 12
            }, {
                "username": "papandreou",
                "commitsCount": 11
            }, {
                "username": "tikotzky",
                "commitsCount": 10
            }, {
                "username": "lalitkapoor",
                "commitsCount": 9
            }, {
                "username": "mmalecki",
                "commitsCount": 9
            }, {
                "username": "csainty",
                "commitsCount": 8
            }, {
                "username": "ahmadnassri",
                "commitsCount": 8
            }, {
                "username": "samcday",
                "commitsCount": 7
            }, {
                "username": "RReverser",
                "commitsCount": 7
            }, {
                "username": "jhs",
                "commitsCount": 6
            }, {
                "username": "twilson63",
                "commitsCount": 5
            }, {
                "username": "janjongboom",
                "commitsCount": 5
            }, {
                "username": "benatkin",
                "commitsCount": 5
            }, {
                "username": "joaojeronimo",
                "commitsCount": 5
            }, {
                "username": "charlespwd",
                "commitsCount": 5
            }, {
                "username": "netpoetica",
                "commitsCount": 5
            }, {
                "username": "fantapop",
                "commitsCount": 5
            }, {
                "username": "aesopwolf",
                "commitsCount": 5
            }, {
                "username": "kevinoid",
                "commitsCount": 5
            }, {
                "username": "vpulim",
                "commitsCount": 4
            }, {
                "username": "noway421",
                "commitsCount": 4
            }, {
                "username": "wprl",
                "commitsCount": 4
            }, {
                "username": "mafintosh",
                "commitsCount": 4
            }, {
                "username": "emkay",
                "commitsCount": 4
            }, {
                "username": "tbuchok",
                "commitsCount": 4
            }, {
                "username": "rwky",
                "commitsCount": 4
            }, {
                "username": "0x4139",
                "commitsCount": 4
            }, {
                "username": "guimon",
                "commitsCount": 4
            }, {
                "username": "aaron-em",
                "commitsCount": 4
            }, {
                "username": "Stanley",
                "commitsCount": 3
            }, {
                "username": "thejh",
                "commitsCount": 3
            }, {
                "username": "polotek",
                "commitsCount": 3
            }, {
                "username": "Filirom1",
                "commitsCount": 3
            }, {
                "username": "nlf",
                "commitsCount": 3
            }, {
                "username": "hueniverse",
                "commitsCount": 3
            }, {
                "username": "lexander",
                "commitsCount": 3
            }, {
                "username": "diversario",
                "commitsCount": 3
            }, {
                "username": "dai-shi",
                "commitsCount": 3
            }, {
                "username": "stash",
                "commitsCount": 3
            }, {
                "username": "lyuzashi",
                "commitsCount": 3
            }, {
                "username": "ZJONSSON",
                "commitsCount": 3
            }, {
                "username": "mitsuru",
                "commitsCount": 3
            }, {
                "username": "hypesystem",
                "commitsCount": 3
            }, {
                "username": "DullReferenceException",
                "commitsCount": 3
            }, {
                "username": "mgenereu",
                "commitsCount": 3
            }, {
                "username": "watson",
                "commitsCount": 3
            }, {
                "username": "zertosh",
                "commitsCount": 3
            }, {
                "username": "notmatt",
                "commitsCount": 2
            }, {
                "username": "clement",
                "commitsCount": 2
            }, {
                "username": "mbrevoort",
                "commitsCount": 2
            }, {
                "username": "jhurliman",
                "commitsCount": 2
            }, {
                "username": "substack",
                "commitsCount": 2
            }, {
                "username": "itay",
                "commitsCount": 2
            }, {
                "username": "goatslacker",
                "commitsCount": 2
            }, {
                "username": "zephrax",
                "commitsCount": 2
            }, {
                "username": "timshadel",
                "commitsCount": 2
            }, {
                "username": "joemccann",
                "commitsCount": 2
            }, {
                "username": "alexindigo",
                "commitsCount": 2
            }, {
                "username": "Marsup",
                "commitsCount": 2
            }, {
                "username": "drudge",
                "commitsCount": 2
            }, {
                "username": "jplock",
                "commitsCount": 2
            }, {
                "username": "shimaore",
                "commitsCount": 2
            }, {
                "username": "davidlehn",
                "commitsCount": 2
            }, {
                "username": "SamPlacette",
                "commitsCount": 2
            }, {
                "username": "Cauldrath",
                "commitsCount": 2
            }, {
                "username": "jrgm",
                "commitsCount": 2
            }, {
                "username": "VRMink",
                "commitsCount": 2
            }, {
                "username": "mikermcneil",
                "commitsCount": 2
            }, {
                "username": "jvmccarthy",
                "commitsCount": 2
            }, {
                "username": "tgohn",
                "commitsCount": 2
            }, {
                "username": "vohof",
                "commitsCount": 2
            }, {
                "username": "aj0strow",
                "commitsCount": 2
            }, {
                "username": "pvoznenko",
                "commitsCount": 2
            }, {
                "username": "hyjin",
                "commitsCount": 2
            }, {
                "username": "crocket",
                "commitsCount": 2
            }, {
                "username": "bcoe",
                "commitsCount": 2
            }, {
                "username": "cappslock",
                "commitsCount": 2
            }, {
                "username": "dotcypress",
                "commitsCount": 2
            }, {
                "username": "apoco",
                "commitsCount": 2
            }, {
                "username": "poislagarde",
                "commitsCount": 2
            }, {
                "username": "akshayp",
                "commitsCount": 2
            }, {
                "username": "YasharF",
                "commitsCount": 2
            }, {
                "username": "daniel347x",
                "commitsCount": 2
            }, {
                "username": "kevinburke",
                "commitsCount": 2
            }, {
                "username": "calibr",
                "commitsCount": 2
            }, {
                "username": "joshux",
                "commitsCount": 2
            }, {
                "username": "LoicMahieu",
                "commitsCount": 2
            }, {
                "username": "JoshWillik",
                "commitsCount": 2
            }, {
                "username": "ReadmeCritic",
                "commitsCount": 2
            }, {
                "username": "jongyoonlee",
                "commitsCount": 2
            }, {
                "username": "paulirish",
                "commitsCount": 2
            }],
            "commits": [{
                "from": "2017-01-14T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 24
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 52
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 121
            }]
        },
        "source": {
            "files": {
                "readmeSize": 41731,
                "testsSize": 264056,
                "hasChangelog": true
            },
            "repositorySize": 469701,
            "linters": {
                "js": ["eslint"]
            },
            "coverage": 0.93,
            "badges": [{
                "urls": {
                    "original": "https://nodei.co/npm/request.png?downloadRank=true&downloads=true&stars=true",
                    "shields": "https://img.shields.io/npm/v/request.svg",
                    "content": "https://img.shields.io/npm/v/request.json"
                },
                "info": {
                    "service": "npm",
                    "type": "version"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/travis/request/request/master.svg?style=flat-square",
                    "service": "https://api.travis-ci.org/request/request.svg?branch=master",
                    "shields": "https://img.shields.io/travis/request/request/master.svg",
                    "content": "https://img.shields.io/travis/request/request/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square",
                    "service": "https://coveralls.io/repos/github/request/request/badge.svg",
                    "shields": "https://img.shields.io/coveralls/request/request.svg",
                    "content": "https://img.shields.io/coveralls/request/request.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/coveralls/request/request.svg?style=flat-square",
                    "service": "https://coveralls.io/repos/request/request/badge.svg",
                    "shields": "https://img.shields.io/coveralls/request/request.svg",
                    "content": "https://img.shields.io/coveralls/request/request.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/david/request/request.svg?style=flat-square",
                    "service": "https://david-dm.org/request/request.svg",
                    "shields": "https://img.shields.io/david/request/request.svg",
                    "content": "https://img.shields.io/david/request/request.json"
                },
                "info": {
                    "service": "david",
                    "type": "dependencies",
                    "modifiers": {
                        "statusType": "normal"
                    }
                }
            }],
            "outdatedDependencies": {
                "har-validator": {
                    "required": "~2.0.6",
                    "stable": "4.2.0",
                    "latest": "4.2.0"
                },
                "hawk": {
                    "required": "~3.1.3",
                    "stable": "6.0.1",
                    "latest": "6.0.1"
                }
            }
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9999999999999999,
            "tests": 0.7395,
            "health": 0.8,
            "branding": 0.6
        },
        "popularity": {
            "communityInterest": 17245,
            "downloadsCount": 17839154.666666668,
            "downloadsAcceleration": 12290.703272450512,
            "dependentsCount": 18404
        },
        "maintenance": {
            "releasesFrequency": 0.9661815068493151,
            "commitsFrequency": 0.9177808219178082,
            "openIssues": 1,
            "issuesDistribution": 0
        }
    },
    "score": {
        "final": 0.8494349555982215,
        "detail": {
            "quality": 0.9579097800865932,
            "popularity": 0.9392368349998039,
            "maintenance": 0.6666546552066062
        }
    }
}, {
    "analyzedAt": "2017-01-20T11:06:32.219Z",
    "collected": {
        "metadata": {
            "name": "request-promise",
            "version": "4.1.1",
            "description": "The simplified HTTP request client 'request' with Promise support. Powered by Bluebird.",
            "keywords": ["xhr", "http", "https", "promise", "request", "then", "thenable", "bluebird"],
            "date": "2016-08-08T11:10:16.243Z",
            "author": {
                "name": "Nicolai Kamenzky",
                "url": "https://github.com/analog-nico"
            },
            "publisher": {
                "username": "analog-nico",
                "email": "nicolai.kamenzky@testrails.org"
            },
            "maintainers": [{
                "username": "analog-nico",
                "email": "nicolai.kamenzky@testrails.org"
            }, {
                "username": "mikeal",
                "email": "mikeal.rogers@gmail.com"
            }, {
                "username": "nylen",
                "email": "jnylen@gmail.com"
            }, {
                "username": "request",
                "email": "request@outofindex.com"
            }, {
                "username": "simov",
                "email": "simeonvelichkov@gmail.com"
            }, {
                "username": "tyabonil",
                "email": "ty.abonil@gmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git+https://github.com/request/request-promise.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/request-promise",
                "homepage": "https://github.com/request/request-promise#readme",
                "repository": "https://github.com/request/request-promise",
                "bugs": "https://github.com/request/request-promise/issues"
            },
            "license": "ISC",
            "dependencies": {
                "request-promise-core": "1.1.1",
                "bluebird": "^3.4.1",
                "stealthy-require": "^1.0.0"
            },
            "devDependencies": {
                "body-parser": "~1.15.2",
                "chai": "~3.5.0",
                "chalk": "~1.1.3",
                "gulp": "~3.9.1",
                "gulp-coveralls": "~0.1.4",
                "gulp-eslint": "~2.1.0",
                "gulp-istanbul": "~1.0.0",
                "gulp-mocha": "~2.2.0",
                "lodash": "~4.13.1",
                "publish-please": "~2.1.4",
                "request": "^2.34.0",
                "rimraf": "~2.5.3",
                "run-sequence": "~1.2.2"
            },
            "peerDependencies": {
                "request": "^2.34"
            },
            "releases": [{
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 2
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 7
            }, {
                "from": "2015-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 15
            }],
            "hasTestScript": true,
            "readme": "<a href=\"http://promisesaplus.com/\">\n    <img src=\"https://promises-aplus.github.io/promises-spec/assets/logo-small.png\" align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\n# Request-Promise\n\n[![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square&maxAge=2592000)](https://gitter.im/request/request-promise?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://img.shields.io/travis/request/request-promise/master.svg?style=flat-square&maxAge=2592000)](https://travis-ci.org/request/request-promise)\n[![Coverage Status](https://img.shields.io/coveralls/request/request-promise.svg?style=flat-square&maxAge=2592000)](https://coveralls.io/r/request/request-promise)\n[![Dependency Status](https://img.shields.io/david/request/request-promise.svg?style=flat-square&maxAge=2592000)](https://david-dm.org/request/request-promise)\n[![Known Vulnerabilities](https://snyk.io/test/npm/request-promise/badge.svg?style=flat-square&maxAge=2592000)](https://snyk.io/test/npm/request-promise)\n\nThe simplified HTTP request client 'request' with Promise support. Powered by Bluebird.\n\n[Request](https://github.com/request/request) and [Bluebird](https://github.com/petkaantonov/bluebird) are pretty awesome, but I found myself using the same design pattern. Request-Promise adds a Bluebird-powered `.then(...)` method to Request call objects. By default, http response codes other than 2xx will cause the promise to be rejected. This can be overwritten by setting `options.simple = false`.\n\nAlso check out the new libraries that are **very similar to `request-promise` v4**:\n- [`request-promise-native`](https://github.com/request/request-promise-native) v1 &ndash; Does not depend on Bluebird and uses native ES6 promises instead.\n- [`request-promise-any`](https://github.com/request/request-promise-any) v1 &ndash; Allows you to register any Promise library supported by [`any-promise`](https://www.npmjs.com/package/any-promise).\n\n---\n\n## Migration from v3 to v4\n\n1. `request` became a peer dependency. Thus make sure that `request` is installed into your project as a direct dependency. (`npm install --save request`)\n2. Continuation Local Storage is no longer supported. However, you [can get back the support](https://github.com/request/request-promise/wiki/Getting-Back-Support-for-Continuation-Local-Storage) by using `request-promise-any`.\n3. When you migrated your `transform` function to v3 and had to add `if (!(/^2/.test('' + response.statusCode))) { return resolveWithFullResponse ? response : body; }` you may now set the option `transform2xxOnly = true` instead.\n\n## Migration from v2 to v3\n\n1. The handling of the `transform` function got overhauled. This has two effects:\n    - `StatusCodeError.response` is the transformed instead of the original response now. This error is thrown for non-2xx responses when `options.simple` is `true` (default). Please update your `transform` functions to also cover the transformation of non-2xx responses. To get the old behavior you may add `if (!(/^2/.test('' + response.statusCode))) { return resolveWithFullResponse ? response : body; }` to the first line of your `transform` functions that are used for requests with `options.simple === true`. However, you may prefer updating your `transform` functions to being able to transform 2xx as well as non-2xx responses because this decouples their implementation from the use of the `simple` option when doing requests.\n    - If a transform operation throws an error, the request will be rejected with a `TransformError`. Its `cause` attribute contains the error thrown by the transform operation. Previously, the request was rejected directly with the error thrown by the transform operation. Wrapping it into a `TransformError` makes the error handling easier.\n\n2. Bluebird got updated from v2 to v3. This won't make a difference for most use cases. However, if you use advanced Promise chains starting with the Promise returned by Request-Promise, please check [Bluebird's new features and changes](http://bluebirdjs.com/docs/new-in-bluebird-3.html).\n\n---\n\n## Installation\n\nThis module is installed via npm:\n\n```\nnpm install --save request\nnpm install --save request-promise\n```\n\n`request` is defined as a peer-dependency and thus has to be installed separately.\n\n## Cheat Sheet\n\n``` js\nvar rp = require('request-promise');\n```\n\n### Crawl a webpage\n\n``` js\nrp('http://www.google.com')\n    .then(function (htmlString) {\n        // Process html...\n    })\n    .catch(function (err) {\n        // Crawling failed...\n    });\n```\n\n### Crawl a webpage better\n\n``` js\nvar cheerio = require('cheerio'); // Basically jQuery for node.js\n\nvar options = {\n    uri: 'http://www.google.com',\n    transform: function (body) {\n        return cheerio.load(body);\n    }\n};\n\nrp(options)\n    .then(function ($) {\n        // Process html like you would with jQuery...\n    })\n    .catch(function (err) {\n        // Crawling failed or Cheerio choked...\n    });\n```\n\n### GET something from a JSON REST API\n\n``` js\nvar options = {\n    uri: 'https://api.github.com/user/repos',\n    qs: {\n        access_token: 'xxxxx xxxxx' // -> uri + '?access_token=xxxxx%20xxxxx'\n    },\n    headers: {\n        'User-Agent': 'Request-Promise'\n    },\n    json: true // Automatically parses the JSON string in the response\n};\n\nrp(options)\n    .then(function (repos) {\n        console.log('User has %d repos', repos.length);\n    })\n    .catch(function (err) {\n        // API call failed...\n    });\n```\n\n### POST data to a JSON REST API\n\nSet `option.body` to your data and `json: true` to encode the body as JSON. See below for HTML forms.\n\n``` js\nvar options = {\n    method: 'POST',\n    uri: 'http://api.posttestserver.com/post',\n    body: {\n        some: 'payload'\n    },\n    json: true // Automatically stringifies the body to JSON\n};\n\nrp(options)\n    .then(function (parsedBody) {\n        // POST succeeded...\n    })\n    .catch(function (err) {\n        // POST failed...\n    });\n```\n\n### POST like HTML forms do\n\nSet `option.form` to your data to encode the body the same way as HTML forms do.\n\n``` js\nvar options = {\n    method: 'POST',\n    uri: 'http://posttestserver.com/post.php',\n    form: {\n        some: 'payload' // Will be urlencoded\n    },\n    headers: {\n        /* 'content-type': 'application/x-www-form-urlencoded' */ // Set automatically\n    }\n};\n\nrp(options)\n    .then(function (body) {\n        // POST succeeded...\n    })\n    .catch(function (err) {\n        // POST failed...\n    });\n```\n\n### Get the full response instead of just the body\n\n``` js\nvar options = {\n    method: 'DELETE',\n    uri: 'http://my-server/path/to/resource/1234',\n    resolveWithFullResponse: true    //  <---  <---  <---  <---\n};\n\nrp(options)\n    .then(function (response) {\n        console.log(\"DELETE succeeded with status %d\", response.statusCode);\n    })\n    .catch(function (err) {\n        // Delete failed...\n    });\n```\n\n### Get a rejection only if the request failed for technical reasons\n\n``` js\nvar options = {\n    uri: 'http://www.google.com/this-page-does-not-exist.html',\n    simple: false    //  <---  <---  <---  <---\n};\n\nrp(options)\n    .then(function (body) {\n        // Request succeeded but might as well be a 404\n        // Usually combined with resolveWithFullResponse = true to check response.statusCode\n    })\n    .catch(function (err) {\n        // Request failed due to technical reasons...\n    });\n```\n\n---\n\n**For more options checkout the [Request docs](https://github.com/request/request#requestoptions-callback).**\n\n---\n\n## API in Detail\n\nConsider Request-Promise being:\n\n- A Request object\n\t- With an [identical API](https://github.com/request/request): `require('request-promise') == require('request')` so to say\n\t- However, **STREAMING THE RESPONSE** (e.g. `.pipe(...)`) is **DISCOURAGED** because Request-Promise would grow the memory footprint for large requests unnecessarily high. Use the original Request library for that. You can use both libraries in the same project.\n- Plus some methods on a request call object:\n\t- `rp(...).then(...)` or e.g. `rp.post(...).then(...)` which turn `rp(...)` and `rp.post(...)` into promises\n\t- `rp(...).catch(...)` or e.g. `rp.del(...).catch(...)` which is the same method as provided by Bluebird promises\n\t- `rp(...).finally(...)` or e.g. `rp.put(...).finally(...)` which is the same method as provided by Bluebird promises\n\t- `rp(...).cancel()` or e.g. `rp.get(...).cancel()` which cancels the request\n\t- `rp(...).promise()` or e.g. `rp.head(...).promise()` which returns the underlying promise so you can access the full [Bluebird API](https://github.com/petkaantonov/bluebird/blob/master/API.md)\n- Plus some additional options:\n\t- `simple = true` which is a boolean to set whether status codes other than 2xx should also reject the promise\n\t- `resolveWithFullResponse = false` which is a boolean to set whether the promise should be resolved with the full response or just the response body\n\t- `transform` which takes a function to transform the response into a custom value with which the promise is resolved\n\t- `transform2xxOnly = false` which is a boolean to set whether the transform function is applied to all responses or only to those with a 2xx status code\n\nThe objects returned by request calls like `rp(...)` or e.g. `rp.post(...)` are regular Promises/A+ compliant promises and can be assimilated by any compatible promise library.\n\nThe methods `.then(...)`, `.catch(...)`, and `.finally(...)` - which you can call on the request call objects - return a full-fledged Bluebird promise. That means you have the full [Bluebird API](https://github.com/petkaantonov/bluebird/blob/master/API.md) available for further chaining. E.g.: `rp(...).then(...).spread(...)` If, however, you need a method other than `.then(...)`, `.catch(...)`, or `.finally(...)` to be **FIRST** in the chain, use `.promise()`: `rp(...).promise().bind(...).then(...)`\n\n### .then(onFulfilled, onRejected)\n\n``` js\n// As a Request user you would write:\nvar request = require('request');\n\nrequest('http://google.com', function (err, response, body) {\n    if (err) {\n        handleError({ error: err, response: response, ... });\n    } else if (!(/^2/.test('' + response.statusCode))) { // Status Codes other than 2xx\n        handleError({ error: body, response: response, ... });\n    } else {\n        process(body);\n    }\n});\n\n// As a Request-Promise user you can now write the equivalent code:\nvar rp = require('request-promise');\n\nrp('http://google.com')\n    .then(process, handleError);\n```\n\n``` js\n// The same is available for all http method shortcuts:\nrequest.post('http://example.com/api', function (err, response, body) { ... });\nrp.post('http://example.com/api').then(...);\n```\n\n### .catch(onRejected)\n\n``` js\nrp('http://google.com')\n    .catch(handleError);\n\n// ... is syntactical sugar for:\n\nrp('http://google.com')\n    .then(null, handleError);\n\n\n// However, this:\nrp('http://google.com')\n    .then(process)\n    .catch(handleError);\n\n// ... is safer than:\nrp('http://google.com')\n    .then(process, handleError);\n```\n\nFor more info on `.then(process).catch(handleError)` versus `.then(process, handleError)`, see Bluebird docs on [promise anti-patterns](http://bluebirdjs.com/docs/anti-patterns.html#the-.then).\n\n### .finally(onFinished)\n\n``` js\nrp('http://google.com')\n    .finally(function () {\n\t    // This is called after the request finishes either successful or not successful.\n\t});\n```\n\n### .cancel()\n\nThis method cancels the request using [Bluebird's cancellation feature](http://bluebirdjs.com/docs/api/cancellation.html).\n\nWhen `.cancel()` is called:\n\n- the promise will neither be resolved nor rejected and\n- the request is [aborted](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_request_abort).\n\n### .promise() - For advanced use cases\n\nIn order to not pollute the Request call objects with the methods of the underlying Bluebird promise, only `.then(...)`, `.catch(...)`, and `.finally(...)` were exposed to cover most use cases. The effect is that any methods of a Bluebird promise other than `.then(...)`, `.catch(...)`, or `.finally(...)` cannot be used as the **FIRST** method in the promise chain:\n\n``` js\n// This works:\nrp('http://google.com').then(function () { ... });\nrp('http://google.com').catch(function () { ... });\n\n// This works as well since additional methods are only used AFTER the FIRST call in the chain:\nrp('http://google.com').then(function () { ... }).spread(function () { ... });\nrp('http://google.com').catch(function () { ... }).error(function () { ... });\n\n// Using additional methods as the FIRST call in the chain does not work:\n// rp('http://google.com').bind(this).then(function () { ... });\n\n// Use .promise() in these cases:\nrp('http://google.com').promise().bind(this).then(function () { ... });\n```\n\n### Fulfilled promises and the `resolveWithFullResponse` option\n\n``` js\n// Per default the body is passed to the fulfillment handler:\nrp('http://google.com')\n    .then(function (body) {\n        // Process the html of the Google web page...\n    });\n\n// The resolveWithFullResponse options allows to pass the full response:\nrp({ uri: 'http://google.com', resolveWithFullResponse: true })\n    .then(function (response) {\n        // Access response.statusCode, response.body etc.\n    });\n\n```\n\n### Rejected promises and the `simple` option\n\n``` js\n// The rejection handler is called with a reason object...\nrp('http://google.com')\n    .catch(function (reason) {\n        // Handle failed request...\n\t});\n\n// ... and would be equivalent to this Request-only implementation:\nvar options = { uri: 'http://google.com' };\n\nrequest(options, function (err, response, body) {\n    var reason;\n    if (err) {\n        reason = {\n            cause: err,\n            error: err,\n            options: options,\n            response: response\n        };\n\t} else if (!(/^2/.test('' + response.statusCode))) { // Status Codes other than 2xx\n        reason = {\n            statusCode: response.statusCode,\n            error: body,\n            options: options,\n            response: response\n        };\n    }\n\n    if (reason) {\n        // Handle failed request...\n    }\n});\n\n\n// If you pass the simple option as false...\nrp({ uri: 'http://google.com', simple: false })\n    .catch(function (reason) {\n        // Handle failed request...\n\t});\n\n// ... the equivalent Request-only code would be:\nrequest(options, function (err, response, body) {\n    if (err) {\n        var reason = {\n            cause: err,\n            error: err,\n            options: options,\n            response: response\n        };\n        // Handle failed request...\n\t}\n});\n// E.g. a 404 would now fulfill the promise.\n// Combine it with resolveWithFullResponse = true to check the status code in the fulfillment handler.\n```\n\nWith version 0.4 the reason objects became Error objects with identical properties to ensure backwards compatibility. These new Error types allow targeted catch blocks:\n\n``` js\nvar errors = require('request-promise/errors');\n\nrp('http://google.com')\n\t.catch(errors.StatusCodeError, function (reason) {\n        // The server responded with a status codes other than 2xx.\n        // Check reason.statusCode\n\t})\n    .catch(errors.RequestError, function (reason) {\n        // The request failed due to technical reasons.\n        // reason.cause is the Error object Request would pass into a callback.\n\t});\n```\n\n### The `transform` function\n\nYou can pass a function to `options.transform` to generate a custom fulfillment value when the promise gets resolved.\n\n``` js\n// Just for fun you could reverse the response body:\nvar options = {\n\turi: 'http://google.com',\n    transform: function (body, response, resolveWithFullResponse) {\n        return body.split('').reverse().join('');\n    }\n};\n\nrp(options)\n    .then(function (reversedBody) {\n        // ;D\n    });\n\n\n// However, you could also do something useful:\nvar $ = require('cheerio'); // Basically jQuery for node.js\n\nfunction autoParse(body, response, resolveWithFullResponse) {\n    // FIXME: The content type string could contain additional values like the charset.\n    if (response.headers['content-type'] === 'application/json') {\n        return JSON.parse(body);\n    } else if (response.headers['content-type'] === 'text/html') {\n        return $.load(body);\n    } else {\n        return body;\n    }\n}\n\noptions.transform = autoParse;\n\nrp(options)\n    .then(function (autoParsedBody) {\n        // :)\n    });\n\n\n// You can go one step further and set the transform as the default:\nvar rpap = rp.defaults({ transform: autoParse });\n\nrpap('http://google.com')\n    .then(function (autoParsedBody) {\n        // :)\n    });\n\nrpap('http://echojs.com')\n    .then(function (autoParsedBody) {\n        // =)\n    });\n```\n\nThe third `resolveWithFullResponse` parameter of the transform function is equivalent to the option passed with the request. This allows to distinguish whether just the transformed body or the whole response shall be returned by the transform function:\n\n``` js\nfunction reverseBody(body, response, resolveWithFullResponse) {\n    response.body = response.body.split('').reverse().join('');\n    return resolveWithFullResponse ? response : response.body;\n}\n```\n\nAs of Request-Promise v3 the transform function is ALWAYS executed for non-2xx responses. When `options.simple` is set to `true` (default) then non-2xx responses are rejected with a `StatusCodeError`. In this case the error contains the transformed response:\n\n``` js\nvar options = {\n\turi: 'http://the-server.com/will-return/404',\n\tsimple: true,\n    transform: function (body, response, resolveWithFullResponse) { /* ... */ }\n};\n\nrp(options)\n    .catch(errors.StatusCodeError, function (reason) {\n        // reason.response is the transformed response\n    });\n```\n\nYou may set `options.transform2xxOnly = true` to only execute the transform function for responses with a 2xx status code. For other status codes &ndash; independent of any other settings, e.g. `options.simple` &ndash; the transform function is not executed.\n\n#### Error handling\n\nIf the transform operation fails (throws an error) the request will be rejected with a `TransformError`:\n\n``` js\nvar errors = require('request-promise/errors');\n\nvar options = {\n\turi: 'http://google.com',\n    transform: function (body, response, resolveWithFullResponse) {\n        throw new Error('Transform failed!');\n    }\n};\n\nrp(options)\n    .catch(errors.TransformError, function (reason) {\n        console.log(reason.cause.message); // => Transform failed!\n        // reason.response is the original response for which the transform operation failed\n    });\n```\n\n## Experimental Support for Continuation Local Storage\n\nContinuation Local Storage is no longer supported. However, you [can get back the support](https://github.com/request/request-promise/wiki/Getting-Back-Support-for-Continuation-Local-Storage) by using `request-promise-any`.\n\n## Debugging\n\nThe ways to debug the operation of Request-Promise are the same [as described](https://github.com/request/request#debugging) for Request. These are:\n\n1. Launch the node process like `NODE_DEBUG=request node script.js` (`lib,request,otherlib` works too).\n2. Set `require('request-promise').debug = true` at any time (this does the same thing as #1).\n3. Use the [request-debug module](https://github.com/nylen/request-debug) to view request and response headers and bodies. Instrument Request-Promise with `require('request-debug')(rp);`.\n\n## Mocking Request-Promise\n\nUsually you want to mock the whole request function which is returned by `require('request-promise')`. This is not possible by using a mocking library like [sinon.js](http://sinonjs.org) alone. What you need is a library that ties into the module loader and makes sure that your mock is returned whenever the tested code is calling `require('request-promise')`. [Mockery](https://github.com/mfncooper/mockery) is one of such libraries.\n\n@florianschmidt1994 kindly shared his solution:\n```javascript\nbefore(function (done) {\n\n    var filename = \"fileForResponse\";\n    mockery.enable({\n        warnOnReplace: false,\n        warnOnUnregistered: false,\n        useCleanCache: true\n    });\n\n    mockery.registerMock('request-promise', function () {\n        var response = fs.readFileSync(__dirname + '/data/' + filename, 'utf8');\n        return Bluebird.resolve(response.trim());\n    });\n\n    done();\n});\n\nafter(function (done) {\n    mockery.disable();\n    mockery.deregisterAll();\n    done();\n});\n\ndescribe('custom test case', function () {\n    //  Test some function/module/... which uses request-promise\n    //  and it will always receive the predefined \"fileForResponse\" as data, e.g.:\n    var rp = require('request-promise');\n    rp(...).then(function(data) {\n        // ➞ data is what is in fileForResponse\n    });\n});\n```\n\nBased on that you may now build a more sophisticated mock. [Sinon.js](http://sinonjs.org) may be of help as well.\n\n## Contributing\n\nTo set up your development environment:\n\n1. clone the repo to your desktop,\n2. in the shell `cd` to the main folder,\n3. hit `npm install`,\n4. hit `npm install gulp -g` if you haven't installed gulp globally yet, and\n5. run `gulp dev`. (Or run `node ./node_modules/.bin/gulp dev` if you don't want to install gulp globally.)\n\n`gulp dev` watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from `./coverage/lcov-report/index.html`.\n\nIf you want to debug a test you should use `gulp test-without-coverage` to run all tests without obscuring the code by the test coverage instrumentation.\n\n## Change History\n\n- v4.1.1 (2016-08-08)\n    - Renamed internally used package `@request/promise-core` to `request-promise-core` because there where [too](https://github.com/request/request-promise/issues/137) [many](https://github.com/request/request-promise/issues/141) issues with the scoped package name\n      *(Thanks to @cabrinoob, @crazy4groovy, @dsandor, @KpjComp, @lorenwest, @Reisyukaku, @tehChromic, @todd for providing helpful information.)*\n- v4.1.0 (2016-07-30)\n    - Added cancellation support\n      *(Thanks to @not-an-aardvark for [pull request #123](https://github.com/request/request-promise/pull/123))*\n- v4.0.2 (2016-07-18)\n    - Fix for using with module bundlers like Webpack and Browserify\n- v4.0.1 (2016-07-17)\n    - Fixed `@request/promise-core` version for safer versioning\n- v4.0.0 (2016-07-15)\n    - **Breaking Change**: `request` is declared as a peer dependency which has to be installed separately by the user now\n    - **Breaking Change**: Dropped support for Continuation Local Storage since [`request-promise-any`](https://github.com/request/request-promise-any) can be [used](https://github.com/request/request-promise/wiki/Getting-Back-Support-for-Continuation-Local-Storage) for that now\n    - Introduced the `transform2xxOnly` option to ease the breaking change regarding the new `transform` handling in v3.0.0\n      *(Thanks to @stevage for pointing out the effect of the breaking change in [issue #131](https://github.com/request/request-promise/issues/131))*\n    - Resolved issues [#65](https://github.com/request/request-promise/issues/65) and [#71](https://github.com/request/request-promise/issues/71) by publishing nearly identical libraries to support other Promise implementations: [`request-promise-native`](https://github.com/request/request-promise-native) and [`request-promise-any`](https://github.com/request/request-promise-any)\n      *(Thanks to @benjamingr, @eilgin, @gillesdemey, @hildjj, @iggycoloma, @jonathanong, @knpwrs, @MarkHerhold, @massimocode, @mikeal, @niftylettuce, @raitucarp, @sherdeadlock, @tonylukasavage, and @vgoloviznin for the valuable discussions!)*\n    - Relicensed this library with the ISC license\n- v3.0.0 (2016-04-16)\n    - **Breaking Change**: Overhauled the handling of the `transform` function\n      *(Thanks to @Limess for explaining the need in [issue #86](https://github.com/request/request-promise/issues/86))*\n    - **Breaking Change**: Updated `bluebird` to v3\n      *(Thanks to @BrandonSmith for [pull request #103](https://github.com/request/request-promise/pull/103))*\n    - Improved `StatusCodeError.message`\n    - Updated `lodash` to v4.6\n    - Improved README in regard to `.catch(...)` best practice\n      *(Thanks to @RebootJeff for [pull request #98](https://github.com/request/request-promise/pull/98))*\n- v2.0.1 (2016-02-17)\n    - Updated `lodash` to v4\n      *(Thanks to @ratson for [pull request #94](https://github.com/request/request-promise/pull/94))*\n- v2.0.0 (2016-01-12)\n    - **Breaking Change**: Removed explicit `cls-bluebird` dependency which has to be installed by the user now\n      *(Thanks to @hildjj for his [pull request #75](https://github.com/request/request-promise/pull/75))*\n\t- `npm shrinkwrap` now works for `npm@3` users who don't use `continuation-local-storage`\n\t  *(Thanks to @toboid and @rstacruz for reporting the issue in [issue #70](https://github.com/request/request-promise/issues/70) and [issue #82](https://github.com/request/request-promise/issues/82))*\n- v1.0.2 (2015-10-22)\n    - Removed `continuation-local-storage` from peer dependencies as it was unnecessary\n      *(Thanks to @mrhyde for working on a better solution discussed in [issue #70](https://github.com/request/request-promise/issues/70))*\n- v1.0.1 (2015-10-14)\n    - Fixed a npm warning by marking `continuation-local-storage` as a peer dependency\n- v1.0.0 (2015-10-11)\n    - **Breaking Change**: Some errors that were previously thrown synchronously - e.g. for wrong input parameters - are now passed to the rejected promise instead\n      *(Thanks to @josnidhin for suggesting that in [issue #43](https://github.com/request/request-promise/issues/43))*\n    - **Breaking Change**: Request-Promise does not load its own Bluebird prototype anymore. If you use Bluebird in your project and altered the prototype then Request-Promise may use your altered Bluebird prototype internally.\n    - For HEAD requests the headers instead of an empty body is returned (unless `resolveWithFullResponse = true` is used)\n      *(Thanks to @zcei for proposing the change in [issue #58](https://github.com/request/request-promise/issues/58))*\n    - Extended `transform` function by a third `resolveWithFullResponse` parameter\n    - Added experimental support for continuation local storage\n      *(Thanks to @silverbp preparing this in [issue #64](https://github.com/request/request-promise/issues/64))*\n\t- Added node.js 4 to the Travis CI build\n\t- Updated the README\n\t  *(Thanks to many people for their feedback in issues [#55](https://github.com/request/request-promise/issues/55) and [#59](https://github.com/request/request-promise/issues/59))*\n- v0.4.3 (2015-07-27)\n    - Reduced overhead by just requiring used lodash functions instead of the whole lodash library\n      *(Thanks to @luanmuniz for [pull request #54](https://github.com/request/request-promise/pull/54))*\n    - Updated dependencies\n- v0.4.2 (2015-04-12)\n    - Updated dependencies\n- v0.4.1 (2015-03-20)\n    - Improved Error types to work in browsers without v8 engine\n      *(Thanks to @nodiis for [pull request #40](https://github.com/request/request-promise/pull/40))*\n- v0.4.0 (2015-02-08)\n    - Introduced Error types used for the reject reasons (See last part [this section](#rejected-promises-and-the-simple-option))\n      *(Thanks to @jakecraige for starting the discussion in [issue #38](https://github.com/request/request-promise/issues/38))*\n    - **Minor Breaking Change:** The reject reason objects became actual Error objects. However, `typeof reason === 'object'` still holds true and the error objects have the same properties as the previous reason objects. If the reject handler only accesses the properties on the reason object - which is usually the case - no migration is required.\n    - Added io.js and node.js 0.12 to the Travis CI build\n- v0.3.3 (2015-01-19)\n    - Fixed handling possibly unhandled rejections to work with the latest version of Bluebird\n      *(Thanks to @slang800 for reporting this in [issue #36](https://github.com/request/request-promise/issues/36))*\n- v0.3.2 (2014-11-17)\n\t- Exposed `.finally(...)` to allow using it as the first method in the promise chain\n\t  *(Thanks to @hjpbarcelos for his [pull request #28](https://github.com/request/request-promise/pull/28))*\n- v0.3.1 (2014-11-11)\n\t- Added the `.promise()` method for advanced Bluebird API usage\n\t  *(Thanks to @devo-tox for his feedback in [issue #27](https://github.com/request/request-promise/issues/27))*\n- v0.3.0 (2014-11-10)\n\t- Carefully rewritten from scratch to make Request-Promise a drop-in replacement for Request\n\n## License (ISC)\n\nIn case you never heard about the [ISC license](http://en.wikipedia.org/wiki/ISC_license) it is functionally equivalent to the MIT license.\n\nSee the [LICENSE file](LICENSE) for details."
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-19T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 42249
            }, {
                "from": "2017-01-13T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 234248
            }, {
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 947028
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 2823945
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 4640920
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 6709638
            }],
            "dependentsCount": 1354,
            "starsCount": 116
        },
        "github": {
            "starsCount": 1285,
            "forksCount": 95,
            "subscribersCount": 39,
            "issues": {
                "count": 171,
                "openCount": 24,
                "distribution": {
                    "3600": 27,
                    "10800": 8,
                    "32400": 14,
                    "97200": 23,
                    "291600": 18,
                    "874800": 18,
                    "2624400": 11,
                    "7873200": 26,
                    "23619600": 19,
                    "70858800": 7,
                    "212576400": 0
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "analog-nico",
                "commitsCount": 176
            }, {
                "username": "tyabonil",
                "commitsCount": 14
            }, {
                "username": "courajs",
                "commitsCount": 4
            }, {
                "username": "hbarcelos",
                "commitsCount": 3
            }, {
                "username": "floatdrop",
                "commitsCount": 2
            }, {
                "username": "raineorshine",
                "commitsCount": 2
            }, {
                "username": "jtwb2",
                "commitsCount": 2
            }, {
                "username": "yamsellem",
                "commitsCount": 2
            }, {
                "username": "luanmuniz",
                "commitsCount": 2
            }, {
                "username": "ELLIOTTCABLE",
                "commitsCount": 1
            }, {
                "username": "cwinters",
                "commitsCount": 1
            }, {
                "username": "nodiis",
                "commitsCount": 1
            }, {
                "username": "servel333",
                "commitsCount": 1
            }, {
                "username": "hildjj",
                "commitsCount": 1
            }, {
                "username": "ratson",
                "commitsCount": 1
            }, {
                "username": "RebootJeff",
                "commitsCount": 1
            }, {
                "username": "graingert",
                "commitsCount": 1
            }, {
                "username": "BrandonSmith",
                "commitsCount": 1
            }, {
                "username": "EvanCarroll",
                "commitsCount": 1
            }, {
                "username": "jmm",
                "commitsCount": 1
            }, {
                "username": "not-an-aardvark",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-13T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-10-22T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-07-24T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 8
            }, {
                "from": "2016-01-21T00:00:00.000Z",
                "to": "2017-01-20T00:00:00.000Z",
                "count": 47
            }],
            "statuses": [{
                "context": "coverage/coveralls",
                "state": "success"
            }, {
                "context": "continuous-integration/travis-ci/push",
                "state": "success"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 28923,
                "testsSize": 8774,
                "hasNpmIgnore": true
            },
            "repositorySize": 52157,
            "linters": {
                "general": ["editorconfig"],
                "js": ["eslint"]
            },
            "coverage": 1,
            "badges": [{
                "urls": {
                    "original": "https://img.shields.io/travis/request/request-promise/master.svg?maxAge=2592000",
                    "service": "https://api.travis-ci.org/request/request-promise.svg?branch=master",
                    "shields": "https://img.shields.io/travis/request/request-promise/master.svg",
                    "content": "https://img.shields.io/travis/request/request-promise/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/coveralls/request/request-promise.svg?maxAge=2592000",
                    "service": "https://coveralls.io/repos/request/request-promise/badge.svg",
                    "shields": "https://img.shields.io/coveralls/request/request-promise.svg",
                    "content": "https://img.shields.io/coveralls/request/request-promise.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/david/request/request-promise.svg?maxAge=2592000",
                    "service": "https://david-dm.org/request/request-promise.svg",
                    "shields": "https://img.shields.io/david/request/request-promise.svg",
                    "content": "https://img.shields.io/david/request/request-promise.json"
                },
                "info": {
                    "service": "david",
                    "type": "dependencies",
                    "modifiers": {
                        "statusType": "normal"
                    }
                }
            }]
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9199999999999999,
            "tests": 1,
            "health": 1,
            "branding": 0.44999999999999996
        },
        "popularity": {
            "communityInterest": 1556,
            "downloadsCount": 941315,
            "downloadsAcceleration": 5146.3372907153735,
            "dependentsCount": 1354
        },
        "maintenance": {
            "releasesFrequency": 0.6907534246575343,
            "commitsFrequency": 0.7186301369863013,
            "openIssues": 1,
            "issuesDistribution": 0.7170798302574619
        }
    },
    "score": {
        "final": 0.8712158695483203,
        "detail": {
            "quality": 0.9884606556006325,
            "popularity": 0.649343637404257,
            "maintenance": 0.992592570790402
        }
    }
}, {
    "analyzedAt": "2017-01-21T07:00:06.150Z",
    "collected": {
        "metadata": {
            "name": "yargs",
            "version": "6.6.0",
            "description": "yargs the modern, pirate-themed, successor to optimist.",
            "keywords": ["argument", "args", "option", "parser", "parsing", "cli", "command"],
            "date": "2016-12-30T16:53:16.023Z",
            "publisher": {
                "username": "bcoe",
                "email": "ben@npmjs.com"
            },
            "maintainers": [{
                "username": "bcoe",
                "email": "ben@npmjs.com"
            }, {
                "username": "chevex",
                "email": "alex.ford@codetunnel.com"
            }, {
                "username": "nexdrew",
                "email": "andrew@npmjs.com"
            }, {
                "username": "nylen",
                "email": "jnylen@gmail.com"
            }],
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/yargs/yargs.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/yargs",
                "homepage": "http://yargs.js.org/",
                "repository": "https://github.com/yargs/yargs",
                "bugs": "https://github.com/yargs/yargs/issues"
            },
            "license": "MIT",
            "dependencies": {
                "camelcase": "^3.0.0",
                "cliui": "^3.2.0",
                "decamelize": "^1.1.1",
                "get-caller-file": "^1.0.1",
                "os-locale": "^1.4.0",
                "read-pkg-up": "^1.0.1",
                "require-directory": "^2.1.1",
                "require-main-filename": "^1.0.1",
                "set-blocking": "^2.0.0",
                "string-width": "^1.0.2",
                "which-module": "^1.0.0",
                "y18n": "^3.2.1",
                "yargs-parser": "^4.2.0"
            },
            "devDependencies": {
                "chai": "^3.4.1",
                "chalk": "^1.1.3",
                "coveralls": "^2.11.11",
                "cpr": "^2.0.0",
                "cross-spawn": "^5.0.1",
                "es6-promise": "^4.0.2",
                "hashish": "0.0.4",
                "mocha": "^3.0.1",
                "nyc": "^10.0.0",
                "rimraf": "^2.5.0",
                "standard": "^8.6.0",
                "standard-version": "^3.0.0",
                "which": "^1.2.9"
            },
            "releases": [{
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 7
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 9
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 20
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 44
            }, {
                "from": "2015-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 97
            }],
            "hasTestScript": true,
            "hasSelectiveFiles": true,
            "readme": "yargs\n========\n\nYargs be a node.js library fer hearties tryin' ter parse optstrings.\n\nWith yargs, ye be havin' a map that leads straight to yer treasure! Treasure of course, being a simple option hash.\n\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![NPM version][npm-image]][npm-url]\n[![Windows Tests][windows-image]][windows-url]\n[![js-standard-style][standard-image]][standard-url]\n[![standard-version][standard-version-image]][standard-version-url]\n[![Gitter][gitter-image]][gitter-url]\n\n> Yargs is the official successor to optimist. Please feel free to submit issues and pull requests. If you'd like to contribute and don't know where to start, have a look at [the issue list](https://github.com/yargs/yargs/issues) :)\n\nexamples\n========\n\nWith yargs, the options be just a hash!\n-------------------------------------------------------------------\n\nplunder.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs').argv;\n\nif (argv.ships > 3 && argv.distance < 53.5) {\n    console.log('Plunder more riffiwobbles!');\n} else {\n    console.log('Retreat from the xupptumblers!');\n}\n````\n\n***\n\n    $ ./plunder.js --ships=4 --distance=22\n    Plunder more riffiwobbles!\n\n    $ ./plunder.js --ships 12 --distance 98.7\n    Retreat from the xupptumblers!\n\n![Joe was one optimistic pirate.](https://i.imgur.com/4WFGVJ9.png)\n\nBut don't walk the plank just yet! There be more! You can do short options:\n-------------------------------------------------\n\nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs').argv;\nconsole.log('(%d,%d)', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long, short, and even grouped:\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs').argv;\n\nif (argv.s) {\n    process.stdout.write(argv.fr ? 'Le perroquet dit: ' : 'The parrot says: ');\n}\nconsole.log(\n    (argv.fr ? 'couac' : 'squawk') + (argv.p ? '!' : '')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The parrot says: squawk\n\n    $ ./bool.js -sp\n    The parrot says: squawk!\n\n    $ ./bool.js -sp --fr\n    Le perroquet dit: couac!\n\nAnd non-hyphenated options too! Just use `argv._`!\n-------------------------------------------------\n\nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs').argv;\nconsole.log('(%d,%d)', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 rum\n    (6.82,3.35)\n    [ 'rum' ]\n\n    $ ./nonopt.js \"me hearties\" -x 0.54 yo -y 1.12 ho\n    (0.54,1.12)\n    [ 'me hearties', 'yo', 'ho' ]\n\nYargs even counts your booleans!\n----------------------------------------------------------------------\n\ncount.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .count('verbose')\n    .alias('v', 'verbose')\n    .argv;\n\nVERBOSE_LEVEL = argv.verbose;\n\nfunction WARN()  { VERBOSE_LEVEL >= 0 && console.log.apply(console, arguments); }\nfunction INFO()  { VERBOSE_LEVEL >= 1 && console.log.apply(console, arguments); }\nfunction DEBUG() { VERBOSE_LEVEL >= 2 && console.log.apply(console, arguments); }\n\nWARN(\"Showing only important stuff\");\nINFO(\"Showing semi-important stuff too\");\nDEBUG(\"Extra chatty mode\");\n````\n\n***\n    $ node count.js\n    Showing only important stuff\n\n    $ node count.js -v\n    Showing only important stuff\n    Showing semi-important stuff too\n\n    $ node count.js -vv\n    Showing only important stuff\n    Showing semi-important stuff too\n    Extra chatty mode\n\n    $ node count.js -v --verbose\n    Showing only important stuff\n    Showing semi-important stuff too\n    Extra chatty mode\n\nTell users how to use yer options and make demands.\n-------------------------------------------------\n\narea.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .usage('Usage: $0 -w [num] -h [num]')\n    .demandOption(['w','h'])\n    .argv;\n\nconsole.log(\"The area is:\", argv.w * argv.h);\n````\n\n***\n\n    $ ./area.js -w 55 -h 11\n    The area is: 605\n\n    $ node ./area.js -w 4.91 -w 2.51\n    Usage: area.js -w [num] -h [num]\n\n    Options:\n      -w  [required]\n      -h  [required]\n\n    Missing required arguments: h\n\nAfter yer demands have been met, demand more! Ask for non-hyphenated arguments!\n-----------------------------------------\n\ndemand_count.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .demandCommand(2)\n    .argv;\nconsole.dir(argv);\n````\n\n***\n\n\t$ ./demand_count.js a\n\n\tNot enough non-option arguments: got 1, need at least 2\n\n\t$ ./demand_count.js a b\n\t{ _: [ 'a', 'b' ], '$0': 'demand_count.js' }\n\n\t$ ./demand_count.js a b c\n\t{ _: [ 'a', 'b', 'c' ], '$0': 'demand_count.js' }\n\nEVEN MORE SHIVER ME TIMBERS!\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .default('x', 10)\n    .default('y', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .boolean('v')\n    .argv\n;\nconsole.dir(argv.v);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_single.js -v \"me hearties\" yo ho\n    true\n    [ 'me hearties', 'yo', 'ho' ]\n\n\nboolean_double.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .boolean(['x','y','z'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ 'one', 'two', 'three' ]\n\nYargs is here to help you...\n---------------------------\n\nYe can describe parameters fer help messages and set aliases. Yargs figures\nout how ter format a handy help string automatically.\n\nline_count.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('count', 'Count the lines in a file')\n    .example('$0 count -f foo.js', 'count the lines in the given file')\n    .alias('f', 'file')\n    .nargs('f', 1)\n    .describe('f', 'Load a file')\n    .demandOption(['f'])\n    .help('h')\n    .alias('h', 'help')\n    .epilog('copyright 2015')\n    .argv;\n\nvar fs = require('fs');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on('data', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on('end', function () {\n    console.log(lines);\n});\n````\n\n***\n    $ node line_count.js count\n    Usage: line_count.js <command> [options]\n\n    Commands:\n      count    Count the lines in a file\n\n    Options:\n      -f, --file  Load a file        [required]\n      -h, --help  Show help           [boolean]\n\n    Examples:\n      line_count.js count -f foo.js  count the lines in the given file\n\n    copyright 2015\n\n    Missing required arguments: f\n\n    $ node line_count.js count --file line_count.js\n    26\n\n    $ node line_count.js count -f line_count.js\n    26\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire('yargs').argv\n````\n\nwill use the `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire('yargs')([ '-x', '1', '-y', '2' ]).argv\n````\n\nor use `.parse()` to do the same thing:\n\n````javascript\nrequire('yargs').parse([ '-x', '1', '-y', '2' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n<a name=\"alias\"></a>.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\nEach key of this object should be the canonical version of the option, and each\nvalue should be a string or an array of strings.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nIf `yargs` is executed in an environment that embeds node and there's no script name (e.g.\n[Electron](http://electron.atom.io/) or [nw.js](http://nwjs.io/)), it will ignore the first parameter since it\nexpects it to be the script name. In order to override this behavior, use `.parse(process.argv.slice(1))`\ninstead of `.argv` and the first parameter won't be ignored.\n\n<a name=\"array\"></a>.array(key)\n----------\n\nTell the parser to interpret `key` as an array. If `.array('foo')` is set,\n`--foo foo bar` will be parsed as `['foo', 'bar']` rather than as `'foo'`.\n\n<a name=\"boolean\"></a>.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won't get set as the value of `key`.\n\n`key` will default to `false`, unless a `default(key, undefined)` is\nexplicitly set.\n\nIf `key` is an array, interpret all the elements as booleans.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\n`fn` is called with two arguments, the parsed `argv` hash and an array of options and their aliases.\n\nIf `fn` throws or returns a non-truthy value, show the thrown error, usage information, and\nexit.\n\n<a name=\"choices\"></a>.choices(key, choices)\n----------------------\n\nLimit valid values for `key` to a predefined set of `choices`, given as an array\nor as an individual value.\n\n```js\nvar argv = require('yargs')\n  .alias('i', 'ingredient')\n  .describe('i', 'choose your sandwich ingredients')\n  .choices('i', ['peanut-butter', 'jelly', 'banana', 'pickles'])\n  .help('help')\n  .argv\n```\n\nIf this method is called multiple times, all enumerated values will be merged\ntogether. Choices are generally strings or numbers, and value matching is\ncase-sensitive.\n\nOptionally `.choices()` can take an object that maps multiple keys to their\nchoices.\n\nChoices can also be specified as `choices` in the object given to `option()`.\n\n```js\nvar argv = require('yargs')\n  .option('size', {\n    alias: 's',\n    describe: 'choose a size',\n    choices: ['xs', 's', 'm', 'l', 'xl']\n  })\n  .argv\n```\n\n<a name=\"coerce\"></a>.coerce(key, fn)\n----------------\n\nProvide a synchronous function to coerce or transform the value(s) given on the\ncommand line for `key`.\n\nThe coercion function should accept one argument, representing the parsed value\nfrom the command line, and should return a new value or throw an error. The\nreturned value will be used as the value for `key` (or one of its aliases) in\n`argv`.\n\nIf the function throws, the error will be treated as a validation\nfailure, delegating to either a custom [`.fail()`](#fail) handler or printing\nthe error message in the console.\n\nCoercion will be applied to a value after\nall other modifications, such as [`.normalize()`](#normalize).\n\n_Examples:_\n\n```js\nvar argv = require('yargs')\n  .coerce('file', function (arg) {\n    return require('fs').readFileSync(arg, 'utf8')\n  })\n  .argv\n```\n\nOptionally `.coerce()` can take an object that maps several keys to their\nrespective coercion function.\n\n```js\nvar argv = require('yargs')\n  .coerce({\n    date: Date.parse,\n    json: JSON.parse\n  })\n  .argv\n```\n\nYou can also map the same function to several keys at one time. Just pass an\narray of keys as the first argument to `.coerce()`:\n\n```js\nvar path = require('path')\nvar argv = require('yargs')\n  .coerce(['src', 'dest'], path.resolve)\n  .argv\n```\n\nIf you are using dot-notion or arrays, .e.g., `user.email` and `user.password`,\ncoercion will be applied to the final object that has been parsed:\n\n```js\n// --user.name Batman --user.password 123\n// gives us: {name: 'batman', password: '[SECRET]'}\nvar argv = require('yargs')\n  .option('user')\n  .coerce('user', opt => {\n    opt.name = opt.name.toLowerCase()\n    opt.password = '[SECRET]'\n    return opt\n  })\n  .argv\n```\n\n.command(cmd, desc, [builder], [handler])\n-----------------------------------------\n.command(cmd, desc, [module])\n-----------------------------\n.command(module)\n----------------\n\nDefine the commands exposed by your application.\n\n`cmd` should be a string representing the command or an array of strings\nrepresenting the command and its aliases. Read more about command aliases in the\nsubsection below.\n\nUse `desc` to provide a description for each command your application accepts (the\nvalues stored in `argv._`).  Set `desc` to `false` to create a hidden command.\nHidden commands don't show up in the help output and aren't available for\ncompletion.\n\nOptionally, you can provide a `builder` object to give hints about the\noptions that your command accepts:\n\n```js\nyargs\n  .command('get', 'make a get HTTP request', {\n    url: {\n      alias: 'u',\n      default: 'http://yargs.js.org/'\n    }\n  })\n  .help()\n  .argv\n```\n\nNote that commands will not automatically inherit configuration _or_ options\nof their parent context. This means you'll have to re-apply configuration\nif necessary, and make options global manually using the [global](#global) method.\n\nAdditionally, the [`help`](#help) and [`version`](#version)\noptions (if used) **always** apply globally, just like the\n[`.wrap()`](#wrap) configuration.\n\n`builder` can also be a function. This function is executed\nwith a `yargs` instance, and can be used to provide _advanced_ command specific help:\n\n```js\nyargs\n  .command('get', 'make a get HTTP request', function (yargs) {\n    return yargs.option('url', {\n      alias: 'u',\n      default: 'http://yargs.js.org/'\n    })\n  })\n  .help()\n  .argv\n```\n\nYou can also provide a handler function, which will be executed with the\nparsed `argv` object:\n\n```js\nyargs\n  .command(\n    'get',\n    'make a get HTTP request',\n    function (yargs) {\n      return yargs.option('u', {\n        alias: 'url',\n        describe: 'the URL to make an HTTP request to'\n      })\n    },\n    function (argv) {\n      console.log(argv.url)\n    }\n  )\n  .help()\n  .argv\n```\n\n### Positional Arguments\n\nCommands can accept _optional_ and _required_ positional arguments. Required\npositional arguments take the form `<foo>`, and optional arguments\ntake the form `[bar]`. The parsed positional arguments will be populated in\n`argv`:\n\n```js\nyargs.command('get <source> [proxy]', 'make a get HTTP request')\n  .help()\n  .argv\n```\n\n#### Positional Argument Aliases\n\nAliases can be provided for positional arguments using the `|` character.\nAs an example, suppose our application allows either a username _or_\nan email as the first argument:\n\n```js\nyargs.command('get <username|email> [password]', 'fetch a user by username or email.')\n  .help()\n  .argv\n```\n\nIn this way, both `argv.username` and `argv.email` would be populated with the\nsame value when the command is executed.\n\n#### Variadic Positional Arguments\n\nThe last positional argument can optionally accept an array of\nvalues, by using the `..` operator:\n\n```js\nyargs.command('download <url> [files..]', 'download several files')\n  .help()\n  .argv\n```\n\n### Command Execution\n\nWhen a command is given on the command line, yargs will execute the following:\n\n1. push the command into the current context\n2. reset non-global configuration\n3. apply command configuration via the `builder`, if given\n4. parse and validate args from the command line, including positional args\n5. if validation succeeds, run the `handler` function, if given\n6. pop the command from the current context\n\n### Command Aliases\n\nYou can define aliases for a command by putting the command and all of its\naliases into an array.\n\nAlternatively, a command module may specify an `aliases` property, which may be\na string or an array of strings. All aliases defined via the `command` property\nand the `aliases` property will be concatenated together.\n\nThe first element in the array is considered the canonical command, which may\ndefine positional arguments, and the remaining elements in the array are\nconsidered aliases. Aliases inherit positional args from the canonical command,\nand thus any positional args defined in the aliases themselves are ignored.\n\nIf either the canonical command or any of its aliases are given on the command\nline, the command will be executed.\n\n```js\n#!/usr/bin/env node\nrequire('yargs')\n  .command(['start [app]', 'run', 'up'], 'Start up an app', {}, (argv) => {\n    console.log('starting up the', argv.app || 'default', 'app')\n  })\n  .command({\n    command: 'configure <key> [value]',\n    aliases: ['config', 'cfg'],\n    desc: 'Set a config variable',\n    builder: (yargs) => yargs.default('value', 'true'),\n    handler: (argv) => {\n      console.log(`setting ${argv.key} to ${argv.value}`)\n    }\n  })\n  .demandCommand(1)\n  .help()\n  .wrap(72)\n  .argv\n```\n\n```\n$ ./svc.js help\nCommands:\n  start [app]              Start up an app            [aliases: run, up]\n  configure <key> [value]  Set a config variable  [aliases: config, cfg]\n\nOptions:\n  --help  Show help                                            [boolean]\n\n$ ./svc.js cfg concurrency 4\nsetting concurrency to 4\n\n$ ./svc.js run web\nstarting up the web app\n```\n\n### Providing a Command Module\n\nFor complicated commands you can pull the logic into a module. A module\nsimply needs to export:\n\n* `exports.command`: string (or array of strings) that executes this command when given on the command line, first string may contain positional args\n* `exports.aliases`: array of strings (or a single string) representing aliases of `exports.command`, positional args defined in an alias are ignored\n* `exports.describe`: string used as the description for the command in help text, use `false` for a hidden command\n* `exports.builder`: object declaring the options the command accepts, or a function accepting and returning a yargs instance\n* `exports.handler`: a function which will be passed the parsed argv.\n\n```js\n// my-module.js\nexports.command = 'get <source> [proxy]'\n\nexports.describe = 'make a get HTTP request'\n\nexports.builder = {\n  banana: {\n    default: 'cool'\n  },\n  batman: {\n    default: 'sad'\n  }\n}\n\nexports.handler = function (argv) {\n  // do something with argv.\n}\n```\n\nYou then register the module like so:\n\n```js\nyargs.command(require('my-module'))\n  .help()\n  .argv\n```\n\nOr if the module does not export `command` and `describe` (or if you just want to override them):\n\n```js\nyargs.command('get <source> [proxy]', 'make a get HTTP request', require('my-module'))\n  .help()\n  .argv\n```\n\n.commandDir(directory, [opts])\n------------------------------\n\nApply command modules from a directory relative to the module calling this method.\n\nThis allows you to organize multiple commands into their own modules under a\nsingle directory and apply all of them at once instead of calling\n`.command(require('./dir/module'))` multiple times.\n\nBy default, it ignores subdirectories. This is so you can use a directory\nstructure to represent your command hierarchy, where each command applies its\nsubcommands using this method in its builder function. See the example below.\n\nNote that yargs assumes all modules in the given directory are command modules\nand will error if non-command modules are encountered. In this scenario, you\ncan either move your module to a different directory or use the `exclude` or\n`visit` option to manually filter it out. More on that below.\n\n`directory` is a relative directory path as a string (required).\n\n`opts` is an options object (optional). The following options are valid:\n\n- `recurse`: boolean, default `false`\n\n    Look for command modules in all subdirectories and apply them as a flattened\n    (non-hierarchical) list.\n\n- `extensions`: array of strings, default `['js']`\n\n    The types of files to look for when requiring command modules.\n\n- `visit`: function\n\n    A synchronous function called for each command module encountered. Accepts\n    `commandObject`, `pathToFile`, and `filename` as arguments. Returns\n    `commandObject` to include the command; any falsy value to exclude/skip it.\n\n- `include`: RegExp or function\n\n    Whitelist certain modules. See [`require-directory` whitelisting](https://www.npmjs.com/package/require-directory#whitelisting) for details.\n\n- `exclude`: RegExp or function\n\n    Blacklist certain modules. See [`require-directory` blacklisting](https://www.npmjs.com/package/require-directory#blacklisting) for details.\n\n### Example command hierarchy using `.commandDir()`\n\nDesired CLI:\n\n```sh\n$ myapp --help\n$ myapp init\n$ myapp remote --help\n$ myapp remote add base http://yargs.js.org\n$ myapp remote prune base\n$ myapp remote prune base fork whatever\n```\n\nDirectory structure:\n\n```\nmyapp/\n├─ cli.js\n└─ cmds/\n   ├─ init.js\n   ├─ remote.js\n   └─ remote_cmds/\n      ├─ add.js\n      └─ prune.js\n```\n\ncli.js:\n\n```js\n#!/usr/bin/env node\nrequire('yargs')\n  .commandDir('cmds')\n  .demandCommand(1)\n  .help()\n  .argv\n```\n\ncmds/init.js:\n\n```js\nexports.command = 'init [dir]'\nexports.desc = 'Create an empty repo'\nexports.builder = {\n  dir: {\n    default: '.'\n  }\n}\nexports.handler = function (argv) {\n  console.log('init called for dir', argv.dir)\n}\n```\n\ncmds/remote.js:\n\n```js\nexports.command = 'remote <command>'\nexports.desc = 'Manage set of tracked repos'\nexports.builder = function (yargs) {\n  return yargs.commandDir('remote_cmds')\n}\nexports.handler = function (argv) {}\n```\n\ncmds/remote_cmds/add.js:\n\n```js\nexports.command = 'add <name> <url>'\nexports.desc = 'Add remote named <name> for repo at url <url>'\nexports.builder = {}\nexports.handler = function (argv) {\n  console.log('adding remote %s at url %s', argv.name, argv.url)\n}\n```\n\ncmds/remote_cmds/prune.js:\n\n```js\nexports.command = 'prune <name> [names..]'\nexports.desc = 'Delete tracked branches gone stale for remotes'\nexports.builder = {}\nexports.handler = function (argv) {\n  console.log('pruning remotes %s', [].concat(argv.name).concat(argv.names).join(', '))\n}\n```\n\n.completion([cmd], [description], [fn])\n---------------------------------------\n\nEnable bash-completion shortcuts for commands and options.\n\n`cmd`: When present in `argv._`, will result in the `.bashrc` completion script\nbeing outputted. To enable bash completions, concat the generated script to your\n`.bashrc` or `.bash_profile`.\n\n`description`: Provide a description in your usage instructions for the command\nthat generates bash completion scripts.\n\n`fn`: Rather than relying on yargs' default completion functionality, which\nshiver me timbers is pretty awesome, you can provide your own completion\nmethod.\n\nIf invoked without parameters, `.completion()` will make `completion` the command to output\nthe completion script.\n\n```js\nvar argv = require('yargs')\n  .completion('completion', function(current, argv) {\n    // 'current' is the current command being completed.\n    // 'argv' is the parsed arguments so far.\n    // simply return an array of completions.\n    return [\n      'foo',\n      'bar'\n    ];\n  })\n  .argv;\n```\n\nYou can also provide asynchronous completions.\n\n```js\nvar argv = require('yargs')\n  .completion('completion', function(current, argv, done) {\n    setTimeout(function() {\n      done([\n        'apple',\n        'banana'\n      ]);\n    }, 500);\n  })\n  .argv;\n```\n\nBut wait, there's more! You can return an asynchronous promise.\n\n```js\nvar argv = require('yargs')\n  .completion('completion', function(current, argv, done) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve(['apple', 'banana'])\n      }, 10)\n    })\n  })\n  .argv;\n```\n\n<a name=\"config\"></a>.config([key], [description], [parseFn])\n-------------------------------------------------------------\n.config(object)\n---------------\n\nTells the parser that if the option specified by `key` is passed in, it\nshould be interpreted as a path to a JSON config file. The file is loaded\nand parsed, and its properties are set as arguments. Because the file is\nloaded using Node's require(), the filename MUST end in `.json` to be\ninterpreted correctly.\n\nIf invoked without parameters, `.config()` will make `--config` the option to pass the JSON config file.\n\nAn optional `description` can be provided to customize the config (`key`) option\nin the usage string.\n\nAn optional `parseFn` can be used to provide a custom parser. The parsing\nfunction must be synchronous, and should return an object containing\nkey value pairs or an error.\n\n```js\nvar argv = require('yargs')\n  .config('settings', function (configPath) {\n    return JSON.parse(fs.readFileSync(configPath, 'utf-8'))\n  })\n  .argv\n```\n\nYou can also pass an explicit configuration `object`, it will be parsed\nand its properties will be set as arguments.\n\n```js\nvar argv = require('yargs')\n  .config({foo: 1, bar: 2})\n  .argv\nconsole.log(argv)\n```\n\n```\n$ node test.js\n{ _: [],\n  foo: 1,\n  bar: 2,\n  '$0': 'test.js' }\n```\n\n<a name=\"conflicts\"></a>.conflicts(x, y)\n----------------------------------------------\n\nGiven the key `x` is set, the key `y` must not be set.\n\nOptionally `.conflicts()` can accept an object specifying multiple conflicting keys.\n\n<a name=\"count\"></a>.count(key)\n------------\n\nInterpret `key` as a boolean flag, but set its parsed value to the number of\nflag occurrences rather than `true` or `false`. Default value is thus `0`.\n\n<a name=\"default\"></a>.default(key, value, [description])\n---------------------------------------------------------\n.defaults(key, value, [description])\n------------------------------------\n\n**Note:** The `.defaults()` alias is deprecated. It will be\nremoved in the next major version.\n\nSet `argv[key]` to `value` if no option was specified in `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\nBut wait, there's more! The default value can be a `function` which returns\na value. The name of the function will be used in the usage string:\n\n```js\nvar argv = require('yargs')\n  .default('random', function randomValue() {\n    return Math.random() * 256;\n  }).argv;\n```\n\nOptionally, `description` can also be provided and will take precedence over\ndisplaying the value in the usage instructions:\n\n```js\n.default('timeout', 60000, '(one-minute)')\n```\n\n<a name=\"demand\"></a>.demand(count, [max], [msg]) [DEPRECATED]\n--------------------\n\n`demand()` has been deprecated, please instead see [`demandOption()`](#demandOption) and\n[`demandCommand()`](#demandCommand).\n\n<a name=\"demandOption\"></a>.demandOption(key, [msg | boolean])\n------------------------------\n.demandOption(key, msg)\n------------------------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn't\nspecified in `process.argv`.\n\nIf `key` is an array, demand each element.\n\nIf a `msg` string is given, it will be printed when the argument is missing, instead of the standard error message.\n\n```javascript\n// demand an array of keys to be provided\nrequire('yargs')\n  .option('run', {\n    alias: 'r',\n    describe: 'run your program'\n  })\n  .option('path', {\n    alias: 'p',\n    describe: 'provide a path to file'\n  })\n  .option('spec', {\n    alias: 's',\n    describe: 'program specifications'\n  })\n  .demandOption(['run', 'path'], 'Please provide both run and path arguments to work with this tool')\n  .help()\n  .argv\n```\nwhich will provide the following output:\n```bash\nOptions:\n  --run, -r   run your program                [required]\n  --path, -p  provide a path to file          [required]\n  --spec, -s  program specifications\n  --help      Show help                        [boolean]\n\n  Missing required arguments: run, path\n  Please provide both run and path arguments to work with this tool\n```\n\nIf a `boolean` value is given, it controls whether the option is demanded;\nthis is useful when using `.options()` to specify command line parameters.\n\n```javascript\n// demand individual options within the option constructor\nrequire('yargs')\n  .options({\n    'run': {\n      alias: 'r',\n      describe: 'run your program',\n      demand: true\n    },\n    'path': {\n      alias: 'p',\n      describe: 'provide a path to file',\n      demand: true\n    },\n    'spec': {\n      alias: 's',\n      describe: 'program specifications'\n    }\n  })\n  .help()\n  .argv\n```\nwhich will provide the following output:\n```bash\nOptions:\n  --run, -r   run your program                                       [required]\n  --path, -p  provide a path to file                                 [required]\n  --spec, -s  program specifications\n  --help      Show help                                               [boolean]\n\nMissing required arguments: run, path\n```\n\n<a name=\"demandCommand\"></a>.demandCommand(min, [minMsg])\n------------------------------\n.demandCommand(min, [max], [minMsg], [maxMsg])\n------------------------------\n\nDemand in context of commands. You can demand a minimum and a maximum number a user can have within your program, as well as provide corresponding error messages if either of the demands is not met.\n```javascript\nrequire('yargs')\n  .command({\n    command: 'configure <key> [value]',\n    aliases: ['config', 'cfg'],\n    desc: 'Set a config variable',\n    builder: (yargs) => yargs.default('value', 'true'),\n    handler: (argv) => {\n      console.log(`setting ${argv.key} to ${argv.value}`)\n    }\n  })\n  // provide a minimum demand and a minimum demand message\n  .demandCommand(1, 'You need at least one command before moving on')\n  .help()\n  .argv\n```\nwhich will provide the following output:\n```bash\nCommands:\n  configure <key> [value]  Set a config variable         [aliases: config, cfg]\n\nOptions:\n  --help  Show help                                                   [boolean]\n\nYou need at least one command before moving on\n```\n\n_Note: in `minMsg` and `maxMsg`, every occurrence of `$0` will be replaced\nwith the observed value, and every instance of `$1` will be replaced with the\nexpected value._\n\n<a name=\"describe\"></a>.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.detectLocale(boolean)\n-----------\n\nShould yargs attempt to detect the os' locale? Defaults to `true`.\n\n.env([prefix])\n--------------\n\nTell yargs to parse environment variables matching the given prefix and apply\nthem to argv as though they were command line arguments.\n\nUse the \"__\" separator in the environment variable to indicate nested options.\n(e.g. prefix_nested__foo => nested.foo)\n\nIf this method is called with no argument or with an empty string or with `true`,\nthen all env vars will be applied to argv.\n\nProgram arguments are defined in this order of precedence:\n\n1. Command line args\n2. Config file\n3. Env var\n4. Configured defaults\n\n```js\nvar argv = require('yargs')\n  .env('MY_PROGRAM')\n  .option('f', {\n    alias: 'fruit-thing',\n    default: 'apple'\n  })\n  .argv\nconsole.log(argv)\n```\n\n```\n$ node fruity.js\n{ _: [],\n  f: 'apple',\n  'fruit-thing': 'apple',\n  fruitThing: 'apple',\n  '$0': 'fruity.js' }\n```\n\n```\n$ MY_PROGRAM_FRUIT_THING=banana node fruity.js\n{ _: [],\n  fruitThing: 'banana',\n  f: 'banana',\n  'fruit-thing': 'banana',\n  '$0': 'fruity.js' }\n```\n\n```\n$ MY_PROGRAM_FRUIT_THING=banana node fruity.js -f cat\n{ _: [],\n  f: 'cat',\n  'fruit-thing': 'cat',\n  fruitThing: 'cat',\n  '$0': 'fruity.js' }\n```\n\nEnv var parsing is disabled by default, but you can also explicitly disable it\nby calling `.env(false)`, e.g. if you need to undo previous configuration.\n\n.epilog(str)\n------------\n.epilogue(str)\n--------------\n\nA message to print at the end of the usage instructions, e.g.\n\n```js\nvar argv = require('yargs')\n  .epilogue('for more information, find our manual at http://example.com');\n```\n\n.example(cmd, desc)\n-------------------\n\nGive some example invocations of your program. Inside `cmd`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\nExamples will be printed out as part of the help message.\n\n<a name=\"exitprocess\"></a>.exitProcess(enable)\n----------------------------------\n\nBy default, yargs exits the process when the user passes a help flag, uses the\n`.version` functionality, or when validation fails. Calling\n`.exitProcess(false)` disables this behavior, enabling further actions after\nyargs have been validated.\n\n<a name=\"fail\"></a>.fail(fn)\n---------\n\nMethod to execute when a failure occurs, rather than printing the failure message.\n\n`fn` is called with the failure message that would have been printed, the\n`Error` instance originally thrown and yargs state when the failure\noccured.\n\n```js\nvar argv = require('yargs')\n  .fail(function (msg, err, yargs) {\n    if (err) throw err // preserve stack\n    console.error('You broke it!')\n    console.error(msg)\n    console.error('You should be doing', yargs.help())\n    process.exit(1)\n  })\n  .argv\n```\n\n.getCompletion(args, done);\n---------------------------\n\nAllows to programmatically get completion choices for any line.\n\n`args`: An array of the words in the command line to complete.\n\n`done`: The callback to be called with the resulting completions.\n\nFor example:\n\n```js\nrequire('yargs')\n  .option('foobar')\n  .option('foobaz')\n  .completion()\n  .getCompletion(['./test.js', '--foo'], function (completions) {\n    console.log(completions)\n  })\n```\n\nOutputs the same completion choices as `./test.js --foo`<kbd>TAB</kbd>: `--foobar` and `--foobaz`\n\n<a name=\"global\"></a>.global(globals)\n------------\n\nIndicate that an option (or group of options) should not be reset when a command\nis executed, as an example:\n\n```js\nvar argv = require('yargs')\n  .option('a', {\n    alias: 'all',\n    default: true\n  })\n  .option('n', {\n    alias: 'none',\n    default: true\n  })\n  .command('foo', 'foo command', function (yargs) {\n    return yargs.option('b', {\n      alias: 'bar'\n    })\n  })\n  .help('help')\n  .global('a')\n  .argv\n```\n\nIf the `foo` command is executed the `all` option will remain, but the `none`\noption will have been eliminated.\n\n`help`, `version`, and `completion` options default to being global.\n\n<a name=\"group\"></a>.group(key(s), groupName)\n--------------------\n\nGiven a key, or an array of keys, places options under an alternative heading\nwhen displaying usage instructions, e.g.,\n\n```js\nvar yargs = require('yargs')(['--help'])\n  .help()\n  .group('batman', 'Heroes:')\n  .describe('batman', \"world's greatest detective\")\n  .wrap(null)\n  .argv\n```\n***\n    Heroes:\n      --batman  world's greatest detective\n\n    Options:\n      --help  Show help  [boolean]\n\n<a name=\"help\"></a>.help()\n-----------------------------------------\n.help([option | boolean])\n-----------------------------------------\n.help([option, [description | boolean]])\n-----------------------------------------\n.help([option, [description, [boolean]]])\n-----------------------------------------\n\nAdd an option (e.g. `--help`) and implicit command that displays the usage\nstring and exits the process.\n\nIf present, the `description` parameter customizes the description of\nthe help option in the usage string.\n\nIf a boolean argument is provided, it will enable or disable the use of an\nimplicit command. The implicit command is enabled by default, but it can be\ndisabled by passing `false`.\n\nNote that any multi-char aliases (e.g. `help`) used for the help option will\nalso be used for the implicit command. If there are no multi-char aliases (e.g.\n`h`), then all single-char aliases will be used for the command.\n\nIf invoked without parameters, `.help()` will use `--help` as the option and\n`help` as the implicit command to trigger help output.\n\nExample:\n\n```js\nvar yargs = require(\"yargs\")(['--help'])\n  .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\")\n  .help()\n  .argv\n```\n\nLater on, `argv` can be retrieved with `yargs.argv`.\n\n.implies(x, y)\n--------------\n\nGiven the key `x` is set, it is required that the key `y` is set.\n\nOptionally `.implies()` can accept an object specifying multiple implications.\n\n.locale()\n---------\n\nReturn the locale that yargs is currently using.\n\nBy default, yargs will auto-detect the operating system's locale so that\nyargs-generated help content will display in the user's language.\n\nTo override this behavior with a static locale, pass the desired locale as a\nstring to this method (see below).\n\n.locale(locale)\n---------------\n\nOverride the auto-detected locale from the user's operating system with a static\nlocale. Note that the OS locale can be modified by setting/exporting the `LC_ALL`\nenvironment variable.\n\n```js\nvar argv = require('yargs')\n  .usage('./$0 - follow ye instructions true')\n  .option('option', {\n    alias: 'o',\n    describe: \"'tis a mighty fine option\",\n    demand: true\n  })\n  .command('run', \"Arrr, ya best be knowin' what yer doin'\")\n  .example('$0 run foo', \"shiver me timbers, here's an example for ye\")\n  .help('help')\n  .wrap(70)\n  .locale('pirate')\n  .argv\n```\n\n***\n\n```shell\n./test.js - follow ye instructions true\n\nChoose yer command:\n  run  Arrr, ya best be knowin' what yer doin'\n\nOptions for me hearties!\n  --option, -o  'tis a mighty fine option               [requi-yar-ed]\n  --help        Parlay this here code of conduct             [boolean]\n\nEx. marks the spot:\n  test.js run foo  shiver me timbers, here's an example for ye\n\nYe be havin' to set the followin' argument land lubber: option\n```\n\nLocales currently supported:\n\n* **de:** German.\n* **en:** American English.\n* **es:** Spanish.\n* **fr:** French.\n* **hi:** Hindi.\n* **hu:** Hungarian.\n* **id:** Indonesian.\n* **it:** Italian.\n* **ja:** Japanese.\n* **ko:** Korean.\n* **nb:** Norwegian Bokmål.\n* **pirate:** American Pirate.\n* **pl:** Polish.\n* **pt:** Portuguese.\n* **pt_BR:** Brazilian Portuguese.\n* **ru:** Russian.\n* **th:** Thai.\n* **tr:** Turkish.\n* **zh_CN:** Chinese.\n\nTo submit a new translation for yargs:\n\n1. use `./locales/en.json` as a starting point.\n2. submit a pull request with the new locale file.\n\n*The [Microsoft Terminology Search](http://www.microsoft.com/Language/en-US/Search.aspx) can be useful for finding the correct terminology in your locale.*\n\n<a name=\"nargs\"></a>.nargs(key, count)\n-----------\n\nThe number of arguments that should be consumed after a key. This can be a\nuseful hint to prevent parsing ambiguity. For example:\n\n```js\nvar argv = require('yargs')\n  .nargs('token', 1)\n  .parse(['--token', '-my-token']);\n```\n\nparses as:\n\n`{ _: [], token: '-my-token', '$0': 'node test' }`\n\nOptionally `.nargs()` can take an object of `key`/`narg` pairs.\n\n<a name=\"normalize\"></a>.normalize(key)\n---------------\n\nThe key provided represents a path and should have `path.normalize()` applied.\n\n<a name=\"number\"></a>.number(key)\n------------\n\nTell the parser to always interpret `key` as a number.\n\nIf `key` is an array, all elements will be parsed as numbers.\n\nIf the option is given on the command line without a value, `argv` will be\npopulated with `undefined`.\n\nIf the value given on the command line cannot be parsed as a number, `argv` will\nbe populated with `NaN`.\n\nNote that decimals, hexadecimals, and scientific notation are all accepted.\n\n```js\nvar argv = require('yargs')\n  .number('n')\n  .number(['width', 'height'])\n  .argv\n```\n\n.option(key, [opt])\n-----------------\n.options(key, [opt])\n------------------\n\nThis method can be used to make yargs aware of options that _could_\nexist. You can also pass an `opt` object which can hold further\ncustomization, like `.alias()`, `.demandOption()` etc. for that option.\n\nFor example:\n\n````javascript\nvar argv = require('yargs')\n    .option('f', {\n        alias: 'file',\n        demand: true,\n        default: '/etc/passwd',\n        describe: 'x marks the spot',\n        type: 'string'\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require('yargs')\n    .alias('f', 'file')\n    .demandOption('f')\n    .default('f', '/etc/passwd')\n    .describe('f', 'x marks the spot')\n    .string('f')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n````javascript\nvar argv = require('yargs')\n    .options({\n      'f': {\n        alias: 'file',\n        demand: true,\n        default: '/etc/passwd',\n        describe: 'x marks the spot',\n        type: 'string'\n      }\n    })\n    .argv\n;\n````\n\nValid `opt` keys include:\n\n- `alias`: string or array of strings, alias(es) for the canonical option key, see [`alias()`](#alias)\n- `array`: boolean, interpret option as an array, see [`array()`](#array)\n- `boolean`: boolean, interpret option as a boolean flag, see [`boolean()`](#boolean)\n- `choices`: value or array of values, limit valid option arguments to a predefined set, see [`choices()`](#choices)\n- `coerce`: function, coerce or transform parsed command line values into another value, see [`coerce()`](#coerce)\n- `config`: boolean, interpret option as a path to a JSON config file, see [`config()`](#config)\n- `configParser`: function, provide a custom config parsing function, see [`config()`](#config)\n- `count`: boolean, interpret option as a count of boolean flags, see [`count()`](#count)\n- `default`: value, set a default value for the option, see [`default()`](#default)\n- `defaultDescription`: string, use this description for the default value in help content, see [`default()`](#default)\n- `demandOption`: boolean or string, demand the option be given, with optional error message, see [`demandOption()`](#demandOption)\n- `desc`/`describe`/`description`: string, the option description for help content, see [`describe()`](#describe)\n- `global`: boolean, indicate that this key should not be [reset](#reset) when a command is invoked, see [`global()`](#global)\n- `group`: string, when displaying usage instructions place the option under an alternative group heading, see [`group()`](#group)\n- `nargs`: number, specify how many arguments should be consumed for the option, see [`nargs()`](#nargs)\n- `normalize`: boolean, apply `path.normalize()` to the option, see [`normalize()`](#normalize)\n- `number`: boolean, interpret option as a number, [`number()`](#number)\n- `requiresArg`: boolean, require the option be specified with a value, see [`requiresArg()`](#requiresArg)\n- `skipValidation`: boolean, skips validation if the option is present, see [`skipValidation()`](#skipValidation)\n- `string`: boolean, interpret option as a string, see [`string()`](#string)\n- `type`: one of the following strings\n    - `'array'`: synonymous for `array: true`, see [`array()`](#array)\n    - `'boolean'`: synonymous for `boolean: true`, see [`boolean()`](#boolean)\n    - `'count'`: synonymous for `count: true`, see [`count()`](#count)\n    - `'number'`: synonymous for `number: true`, see [`number()`](#number)\n    - `'string'`: synonymous for `string: true`, see [`string()`](#string)\n\n.parse(args, [context], [parseCallback])\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n`args` may either be a pre-processed argv array, or a raw argument string.\n\nA `context` object can optionally be given as the second argument to `parse()`, providing a\nuseful mechanism for passing state information to commands:\n\n```js\nconst parser = yargs\n  .command('lunch-train <restaurant>', 'start lunch train', function () {}, function (argv) {\n    console.log(argv.restaurant, argv.time)\n  })\n  .parse(\"lunch-train rudy's\", {time: '12:15'})\n```\n\nA `parseCallback` can also be provided to `.parse()`. If a callback is given, it will be invoked with three arguments:\n\n1. `err`: populated if any validation errors raised while parsing.\n2. `argv`: the parsed argv object.\n3. `output`: any text that would have been output to the terminal, had a\n  callback not been provided.\n\n```js\n// providing the `fn` argument to `parse()` runs yargs in headless mode, this\n// makes it easy to use yargs in contexts other than the CLI, e.g., writing\n// a chat-bot.\nconst parser = yargs\n  .command('lunch-train <restaurant> <time>', 'start lunch train', function () {}, function (argv) {\n    api.scheduleLunch(argv.restaurant, moment(argv.time))\n  })\n  .help()\n\nparser.parse(bot.userText, function (err, argv, output) {\n  if (output) bot.respond(output)\n})\n```\n\n***Note:*** Providing a callback to `parse()` disables the [`exitProcess` setting](#exitprocess) until after the callback is invoked.\n\n.pkgConf(key, [cwd])\n------------\n\nSimilar to [`config()`](#config), indicates that yargs should interpret the object from the specified key in package.json\nas a configuration object.\n\n`cwd` can optionally be provided, the package.json will be read\nfrom this location.\n\n.recommendCommands()\n---------------------------\n\nShould yargs provide suggestions regarding similar commands if no matching\ncommand is found?\n\n.require(key, [msg | boolean])\n------------------------------\n.required(key, [msg | boolean])\n------------------------------\n\nAn alias for [`demand()`](#demand). See docs there.\n\n<a name=\"requiresArg\"></a>.requiresArg(key)\n-----------------\n\nSpecifies either a single option key (string), or an array of options that\nmust be followed by option values. If any option value is missing, show the\nusage information and exit.\n\nThe default behavior is to set the value of any key not followed by an\noption value to `true`.\n\n<a name=\"reset\"></a>.reset()\n--------\n\nReset the argument object built up so far. This is useful for\ncreating nested command line interfaces. Use [global](#global)\nto specify keys that should not be reset.\n\n```js\nvar yargs = require('yargs')\n  .usage('$0 command')\n  .command('hello', 'hello command')\n  .command('world', 'world command')\n  .demandCommand(1, 'must provide a valid command'),\n  argv = yargs.argv,\n  command = argv._[0];\n\nif (command === 'hello') {\n  yargs.reset()\n    .usage('$0 hello')\n    .help('h')\n    .example('$0 hello', 'print the hello message!')\n    .argv\n\n  console.log('hello!');\n} else if (command === 'world'){\n  yargs.reset()\n    .usage('$0 world')\n    .help('h')\n    .example('$0 world', 'print the world message!')\n    .argv\n\n  console.log('world!');\n} else {\n  yargs.showHelp();\n}\n```\n\n.showCompletionScript()\n----------------------\n\nGenerate a bash completion script. Users of your application can install this\nscript in their `.bashrc`, and yargs will provide completion shortcuts for\ncommands and options.\n\n.showHelp(consoleLevel='error')\n---------------------------\n\nPrint the usage data using the [`console`](https://nodejs.org/api/console.html) function `consoleLevel` for printing.\n\nExample:\n\n```js\nvar yargs = require(\"yargs\")\n  .usage(\"$0 -operand1 number -operand2 number -operation [add|subtract]\");\nyargs.showHelp(); //prints to stderr using console.error()\n```\n\nOr, to print the usage data to `stdout` instead, you can specify the use of `console.log`:\n\n```js\nyargs.showHelp(\"log\"); //prints to stdout using console.log()\n```\n\nLater on, `argv` can be retrieved with `yargs.argv`.\n\n.showHelpOnFail(enable, [message])\n----------------------------------\n\nBy default, yargs outputs a usage string if any error is detected. Use the\n`.showHelpOnFail()` method to customize this behavior. If `enable` is `false`,\nthe usage string is not output. If the `message` parameter is present, this\nmessage is output after the error message.\n\nline_count.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('yargs')\n    .usage('Count the lines in a file.\\nUsage: $0 -f <file>')\n    .demandOption('f')\n    .alias('f', 'file')\n    .describe('f', 'Load a file')\n    .string('f')\n    .showHelpOnFail(false, 'Specify --help for available options')\n    .help('help')\n    .argv;\n\n// etc.\n````\n\n***\n\n```\n$ node line_count.js\nMissing argument value: f\n\nSpecify --help for available options\n```\n\n<a name=\"skipValidation\"></a>.skipValidation(key)\n-----------------\n\nSpecifies either a single option key (string), or an array of options.\nIf any of the options is present, yargs validation is skipped.\n\n.strict()\n---------\n\nAny command-line argument given that is not demanded, or does not have a\ncorresponding description, will be reported as an error.\n\n<a name=\"string\"></a>.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an array, interpret all the elements as strings.\n\n`.string('_')` will result in non-hyphenated arguments being interpreted as strings,\nregardless of whether they resemble numbers.\n\n.updateLocale(obj)\n------------------\n.updateStrings(obj)\n------------------\n\nOverride the default strings used by yargs with the key/value\npairs provided in `obj`:\n\n```js\nvar argv = require('yargs')\n  .command('run', 'the run command')\n  .help('help')\n  .updateStrings({\n    'Commands:': 'My Commands -->\\n'\n  })\n  .wrap(null)\n  .argv\n```\n\n***\n\n```shell\nMy Commands -->\n\n  run  the run command\n\nOptions:\n  --help  Show help  [boolean]\n```\n\nIf you explicitly specify a `locale()`, you should do so *before* calling\n`updateStrings()`.\n\n.usage(message, [opts])\n---------------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n`opts` is optional and acts like calling `.options(opts)`.\n\n<a name=\"version\"></a>.version([option], [description], [version])\n----------------------------------------\n\nAdd an option (e.g. `--version`) that displays the version number (given by the\n`version` parameter) and exits the process.\n\nIf no arguments are passed to `version` (`.version()`), yargs will parse the `package.json`\nof your module and use its `version` value. The default value of `option` is `--version`.\n\nYou can provide a `function` for version, rather than a string.\nThis is useful if you want to use a version stored in a location other than package.json:\n\n```js\nvar argv = require('yargs')\n  .version(function() {\n    return require('../lib/version').version;\n  })\n  .argv;\n```\n\n<a name=\"wrap\"></a>.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\nBy default wrap will be set to `Math.min(80, windowWidth)`. Use `.wrap(null)` to\nspecify no column limit (no right-align). Use `.wrap(yargs.terminalWidth())` to\nmaximize the width of yargs' usage instructions.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ '-c', '3', '-d', '4' ],\n      a: 1,\n      b: 2,\n      '$0': 'examples/reflect.js' }\n\nnegate fields\n-------------\n\nIf you want to explicitly set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [], a: true, b: false, '$0': 'examples/reflect.js' }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [], x: [ 5, 8, 0 ], '$0': 'examples/reflect.js' }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n    $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n    { _: [],\n      foo: { bar: { baz: 33 }, quux: 5 },\n      '$0': 'examples/reflect.js' }\n\nshort numbers\n-------------\n\nShort numeric `-n5` style arguments work too:\n\n    $ node examples/reflect.js -n123 -m456\n    { _: [], n: 123, m: 456, '$0': 'examples/reflect.js' }\n\ninstallation\n============\n\nWith [npm](https://github.com/npm/npm), just do:\n\n    npm install yargs\n\nor clone this project on github:\n\n    git clone http://github.com/yargs/yargs.git\n\nTo run the tests with npm, just do:\n\n    npm test\n\nconfiguration\n=============\n\nUsing the `yargs` stanza in your `package.json` you can turn on and off\nsome of yargs' parsing features:\n\n```json\n{\n  \"yargs\": {\n    \"short-option-groups\": true,\n    \"camel-case-expansion\": true,\n    \"dot-notation\": true,\n    \"parse-numbers\": true,\n    \"boolean-negation\": true\n  }\n}\n```\n\nSee the [yargs-parser](https://github.com/yargs/yargs-parser#configuration) module\nfor detailed documentation of this feature.\n\ninspired by\n===========\n\nThis module is loosely inspired by Perl's\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n\n[travis-url]: https://travis-ci.org/yargs/yargs\n[travis-image]: https://img.shields.io/travis/yargs/yargs/master.svg\n[coveralls-url]: https://coveralls.io/github/yargs/yargs\n[coveralls-image]: https://img.shields.io/coveralls/yargs/yargs.svg\n[npm-url]: https://www.npmjs.com/package/yargs\n[npm-image]: https://img.shields.io/npm/v/yargs.svg\n[windows-url]: https://ci.appveyor.com/project/bcoe/yargs-ljwvf\n[windows-image]: https://img.shields.io/appveyor/ci/bcoe/yargs-ljwvf/master.svg?label=Windows%20Tests\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n[standard-url]: http://standardjs.com/\n[standard-version-image]: https://img.shields.io/badge/release-standard%20version-brightgreen.svg\n[standard-version-url]: https://github.com/conventional-changelog/standard-version\n[gitter-image]: https://img.shields.io/gitter/room/nwjs/nw.js.svg?maxAge=2592000\n[gitter-url]: https://gitter.im/yargs/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link"
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-20T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 757910
            }, {
                "from": "2017-01-14T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 4383734
            }, {
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 15878002
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 50753222
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 94631143
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 163681245
            }],
            "dependentsCount": 4025,
            "starsCount": 300
        },
        "github": {
            "homepage": "http://yargs.js.org/",
            "starsCount": 2453,
            "forksCount": 181,
            "subscribersCount": 48,
            "issues": {
                "count": 765,
                "openCount": 73,
                "distribution": {
                    "3600": 110,
                    "10800": 31,
                    "32400": 57,
                    "97200": 98,
                    "291600": 95,
                    "874800": 132,
                    "2624400": 70,
                    "7873200": 70,
                    "23619600": 63,
                    "70858800": 38,
                    "212576400": 1
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "bcoe",
                "commitsCount": 403
            }, {
                "username": "substack",
                "commitsCount": 145
            }, {
                "username": "chevex",
                "commitsCount": 74
            }, {
                "username": "nexdrew",
                "commitsCount": 34
            }, {
                "username": "greenkeeperio-bot",
                "commitsCount": 22
            }, {
                "username": "maxrimue",
                "commitsCount": 22
            }, {
                "username": "lrlna",
                "commitsCount": 18
            }, {
                "username": "elas7",
                "commitsCount": 15
            }, {
                "username": "nylen",
                "commitsCount": 11
            }, {
                "username": "chrisn",
                "commitsCount": 10
            }, {
                "username": "indexzero",
                "commitsCount": 9
            }, {
                "username": "jfhbrook",
                "commitsCount": 8
            }, {
                "username": "osher",
                "commitsCount": 7
            }, {
                "username": "disjukr",
                "commitsCount": 7
            }, {
                "username": "tschaub",
                "commitsCount": 5
            }, {
                "username": "zkat",
                "commitsCount": 5
            }, {
                "username": "coderarity",
                "commitsCount": 4
            }, {
                "username": "sgentle",
                "commitsCount": 4
            }, {
                "username": "codemonkey3045",
                "commitsCount": 4
            }, {
                "username": "rilut",
                "commitsCount": 4
            }, {
                "username": "feyzo",
                "commitsCount": 4
            }, {
                "username": "raine",
                "commitsCount": 3
            }, {
                "username": "pirxpilot",
                "commitsCount": 3
            }, {
                "username": "LoicMahieu",
                "commitsCount": 3
            }, {
                "username": "novemberborn",
                "commitsCount": 3
            }, {
                "username": "qiu8310",
                "commitsCount": 3
            }, {
                "username": "sindresorhus",
                "commitsCount": 3
            }, {
                "username": "kamilogorek",
                "commitsCount": 3
            }, {
                "username": "papandreou",
                "commitsCount": 2
            }, {
                "username": "DeadAlready",
                "commitsCount": 2
            }, {
                "username": "chbrown",
                "commitsCount": 2
            }, {
                "username": "fizker",
                "commitsCount": 2
            }, {
                "username": "ashi009",
                "commitsCount": 2
            }, {
                "username": "schnittstabil",
                "commitsCount": 2
            }, {
                "username": "isaacs",
                "commitsCount": 2
            }, {
                "username": "dthree",
                "commitsCount": 2
            }, {
                "username": "oti",
                "commitsCount": 2
            }, {
                "username": "madrisan",
                "commitsCount": 2
            }, {
                "username": "p0v1n0m",
                "commitsCount": 2
            }, {
                "username": "marshall",
                "commitsCount": 1
            }, {
                "username": "summatix",
                "commitsCount": 1
            }, {
                "username": "guybrush",
                "commitsCount": 1
            }, {
                "username": "colinta",
                "commitsCount": 1
            }, {
                "username": "vojtajina",
                "commitsCount": 1
            }, {
                "username": "isbadawi",
                "commitsCount": 1
            }, {
                "username": "danielbeardsley",
                "commitsCount": 1
            }, {
                "username": "hdf",
                "commitsCount": 1
            }, {
                "username": "thefourtheye",
                "commitsCount": 1
            }, {
                "username": "vshatskyi",
                "commitsCount": 1
            }, {
                "username": "martinheidegger",
                "commitsCount": 1
            }, {
                "username": "BinaryBrain",
                "commitsCount": 1
            }, {
                "username": "Gobie",
                "commitsCount": 1
            }, {
                "username": "ryansb",
                "commitsCount": 1
            }, {
                "username": "boneskull",
                "commitsCount": 1
            }, {
                "username": "eush77",
                "commitsCount": 1
            }, {
                "username": "cianclarke",
                "commitsCount": 1
            }, {
                "username": "shinnn",
                "commitsCount": 1
            }, {
                "username": "robatron",
                "commitsCount": 1
            }, {
                "username": "rstacruz",
                "commitsCount": 1
            }, {
                "username": "annonymouse",
                "commitsCount": 1
            }, {
                "username": "kemitchell",
                "commitsCount": 1
            }, {
                "username": "linclark",
                "commitsCount": 1
            }, {
                "username": "5c077yP",
                "commitsCount": 1
            }, {
                "username": "ChristianMurphy",
                "commitsCount": 1
            }, {
                "username": "SimenB",
                "commitsCount": 1
            }, {
                "username": "etiktin",
                "commitsCount": 1
            }, {
                "username": "dkoleary88",
                "commitsCount": 1
            }, {
                "username": "38elements",
                "commitsCount": 1
            }, {
                "username": "geophree",
                "commitsCount": 1
            }, {
                "username": "LinusU",
                "commitsCount": 1
            }, {
                "username": "JulioGold",
                "commitsCount": 1
            }, {
                "username": "ReadmeCritic",
                "commitsCount": 1
            }, {
                "username": "josephfrazier",
                "commitsCount": 1
            }, {
                "username": "iarna",
                "commitsCount": 1
            }, {
                "username": "gajus",
                "commitsCount": 1
            }, {
                "username": "watilde",
                "commitsCount": 1
            }, {
                "username": "imdevin567",
                "commitsCount": 1
            }, {
                "username": "jameswomack",
                "commitsCount": 1
            }, {
                "username": "a0viedo",
                "commitsCount": 1
            }, {
                "username": "andyhu",
                "commitsCount": 1
            }, {
                "username": "addaleax",
                "commitsCount": 1
            }, {
                "username": "jmbyerly",
                "commitsCount": 1
            }, {
                "username": "wmhilton",
                "commitsCount": 1
            }, {
                "username": "nolanlawson",
                "commitsCount": 1
            }, {
                "username": "paradox41",
                "commitsCount": 1
            }, {
                "username": "faazshift",
                "commitsCount": 1
            }, {
                "username": "dgrcode",
                "commitsCount": 1
            }, {
                "username": "Hunrik",
                "commitsCount": 1
            }, {
                "username": "babhishek21",
                "commitsCount": 1
            }, {
                "username": "jose4125",
                "commitsCount": 1
            }, {
                "username": "ssonal",
                "commitsCount": 1
            }, {
                "username": "madcampos",
                "commitsCount": 1
            }, {
                "username": "lvarayut",
                "commitsCount": 1
            }, {
                "username": "mathieumg",
                "commitsCount": 1
            }, {
                "username": "Tocive",
                "commitsCount": 1
            }, {
                "username": "mkawalec",
                "commitsCount": 1
            }, {
                "username": "simison",
                "commitsCount": 1
            }, {
                "username": "Janpot",
                "commitsCount": 1
            }, {
                "username": "vseventer",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-14T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 2
            }, {
                "from": "2016-12-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 8
            }, {
                "from": "2016-10-23T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 27
            }, {
                "from": "2016-07-25T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 94
            }, {
                "from": "2016-01-22T00:00:00.000Z",
                "to": "2017-01-21T00:00:00.000Z",
                "count": 274
            }],
            "statuses": [{
                "context": "continuous-integration/appveyor/branch",
                "state": "success"
            }, {
                "context": "coverage/coveralls",
                "state": "success"
            }, {
                "context": "continuous-integration/travis-ci/push",
                "state": "success"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 53446,
                "testsSize": 205939,
                "hasChangelog": true
            },
            "repositorySize": 442017,
            "coverage": 1,
            "badges": [{
                "urls": {
                    "original": "https://img.shields.io/travis/yargs/yargs/master.svg",
                    "service": "https://api.travis-ci.org/yargs/yargs.svg?branch=master",
                    "shields": "https://img.shields.io/travis/yargs/yargs/master.svg",
                    "content": "https://img.shields.io/travis/yargs/yargs/master.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build",
                    "modifiers": {
                        "branch": "master"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/coveralls/yargs/yargs.svg",
                    "service": "https://coveralls.io/repos/yargs/yargs/badge.svg",
                    "shields": "https://img.shields.io/coveralls/yargs/yargs.svg",
                    "content": "https://img.shields.io/coveralls/yargs/yargs.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/npm/v/yargs.svg",
                    "shields": "https://img.shields.io/npm/v/yargs.svg",
                    "content": "https://img.shields.io/npm/v/yargs.json"
                },
                "info": {
                    "service": "npm",
                    "type": "version",
                    "modifiers": {
                        "type": "v"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/gitter/room/nwjs/nw.js.svg?maxAge=2592000",
                    "service": "https://badges.gitter.im/nwjs/nw.js.svg",
                    "shields": "https://img.shields.io/gitter/room/nwjs/nw.js.svg",
                    "content": "https://img.shields.io/gitter/room/nwjs/nw.js.json"
                },
                "info": {
                    "service": "gitter",
                    "type": "misc"
                }
            }],
            "outdatedDependencies": {
                "camelcase": {
                    "required": "^3.0.0",
                    "stable": "4.0.0",
                    "latest": "4.0.0"
                },
                "os-locale": {
                    "required": "^1.4.0",
                    "stable": "2.0.0",
                    "latest": "2.0.0"
                },
                "read-pkg-up": {
                    "required": "^1.0.1",
                    "stable": "2.0.0",
                    "latest": "2.0.0"
                },
                "string-width": {
                    "required": "^1.0.2",
                    "stable": "2.0.0",
                    "latest": "2.0.0"
                },
                "yargs-parser": {
                    "required": "^4.2.0",
                    "stable": "4.2.1",
                    "latest": "4.2.1-candidate.1"
                }
            }
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.8699999999999999,
            "tests": 1,
            "health": 0.5,
            "branding": 1
        },
        "popularity": {
            "communityInterest": 3081,
            "downloadsCount": 16917740.666666668,
            "downloadsAcceleration": 39527.942827245046,
            "dependentsCount": 4025
        },
        "maintenance": {
            "releasesFrequency": 1,
            "commitsFrequency": 1,
            "openIssues": 1,
            "issuesDistribution": 0.7027312889928699
        }
    },
    "score": {
        "final": 0.9232745217849938,
        "detail": {
            "quality": 0.9270449219818171,
            "popularity": 0.8470505274828095,
            "maintenance": 0.9962667444899009
        }
    }
}, {
    "analyzedAt": "2017-01-23T09:58:35.092Z",
    "collected": {
        "metadata": {
            "name": "webpack",
            "version": "1.14.0",
            "description": "Packs CommonJs/AMD modules for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand. Support loaders to preprocess files, i.e. json, jade, coffee, css, less, ... and your custom stuff.",
            "date": "2016-12-07T08:07:03.006Z",
            "author": {
                "name": "Tobias Koppers @sokra"
            },
            "publisher": {
                "username": "sokra",
                "email": "tobias.koppers@googlemail.com"
            },
            "maintainers": [{
                "username": "jhnns",
                "email": "mail@johannesewald.de"
            }, {
                "username": "sokra",
                "email": "tobias.koppers@googlemail.com"
            }, {
                "username": "thelarkinn",
                "email": "sean.larkin@cuw.edu"
            }],
            "repository": {
                "type": "git",
                "url": "git+https://github.com/webpack/webpack.git"
            },
            "links": {
                "npm": "https://www.npmjs.com/package/webpack",
                "homepage": "https://github.com/webpack/webpack",
                "repository": "https://github.com/webpack/webpack",
                "bugs": "https://github.com/webpack/webpack/issues"
            },
            "license": "MIT",
            "dependencies": {
                "acorn": "^3.0.0",
                "async": "^1.3.0",
                "clone": "^1.0.2",
                "enhanced-resolve": "~0.9.0",
                "interpret": "^0.6.4",
                "loader-utils": "^0.2.11",
                "memory-fs": "~0.3.0",
                "mkdirp": "~0.5.0",
                "node-libs-browser": "^0.7.0",
                "optimist": "~0.6.0",
                "supports-color": "^3.1.0",
                "tapable": "~0.1.8",
                "uglify-js": "~2.7.3",
                "watchpack": "^0.2.1",
                "webpack-core": "~0.6.9"
            },
            "devDependencies": {
                "benchmark": "^1.0.0",
                "bundle-loader": "~0.5.0",
                "codecov.io": "^0.1.2",
                "coffee-loader": "~0.7.1",
                "coffee-script": "^1.10.0",
                "component-webpack-plugin": "~0.2.0",
                "coveralls": "^2.11.2",
                "css-loader": "~0.15.0",
                "diff": "^2.0.2",
                "eslint": "^1.1.0",
                "eslint-plugin-nodeca": "^1.0.3",
                "express": "~4.13.1",
                "extract-text-webpack-plugin": "~0.8.0",
                "file-loader": "~0.8.0",
                "glob": "^5.0.14",
                "i18n-webpack-plugin": "~0.2.0",
                "istanbul": "^0.3.13",
                "jade": "^1.11.0",
                "jade-loader": "~0.7.0",
                "js-beautify": "^1.5.10",
                "json-loader": "~0.5.1",
                "less": "^2.5.1",
                "less-loader": "^2.0.0",
                "mocha": "~2.2.0",
                "mocha-lcov-reporter": "0.0.2",
                "raw-loader": "~0.5.0",
                "script-loader": "~0.6.0",
                "should": "^7.0.2",
                "style-loader": "~0.12.0",
                "url-loader": "~0.5.0",
                "val-loader": "~0.5.0",
                "vm-browserify": "~0.0.0",
                "webpack-dev-middleware": "^1.0.0",
                "worker-loader": "~0.6.0"
            },
            "releases": [{
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 7
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 15
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 21
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 50
            }, {
                "from": "2015-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 106
            }],
            "hasTestScript": true,
            "hasSelectiveFiles": true,
            "readme": "[![webpack](https://webpack.github.io/assets/logo.png)](https://webpack.github.io)\r\n\r\n\r\n[![NPM version][npm-image]][npm-url] [![Gitter chat][gitter-image]][gitter-url] [![Downloads][downloads-image]][downloads-url]\r\n[![NPM][nodei-image]][nodei-url]\r\n\r\nbuild\r\n[![Build Status][travis-image]][travis-url] [![Appveyor Status][appveyor-image]][appveyor-url]  [![Coverage Status][coveralls-image]][coveralls-url]\r\n\r\ndependencies\r\n[![Dependency Status][david-image]][david-url] [![devDependency Status][david-dev-image]][david-dev-url] [![peerDependency Status][david-peer-image]][david-peer-url]\r\n\r\ndonation\r\n[![gratipay donate button][gratipay-image]][gratipay-url] [![Donate to sokra][donate-image]][donate-url]\r\n\r\n\r\n[documentation](https://webpack.github.io/docs/?utm_source=github&utm_medium=readme&utm_campaign=top)\r\n\r\n# Introduction\r\n\r\nwebpack is a bundler for modules. The main purpose is to bundle JavaScript\r\nfiles for usage in a browser, yet it is also capable of transforming, bundling,\r\nor packaging just about any resource or asset.\r\n\r\n\r\n**TL; DR**\r\n\r\n* Bundles both [CommonJs](http://www.commonjs.org/specs/modules/1.0/) and [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) modules (even combined).\r\n* Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time).\r\n* Dependencies are resolved during compilation reducing the runtime size.\r\n* Loaders can preprocess files while compiling, e.g. coffeescript to JavaScript, handlebars strings to compiled functions, images to Base64, etc.\r\n* Highly modular plugin system to do whatever else your application requires.\r\n\r\n# Getting Started\r\n\r\nCheck out webpack's [documentation](https://webpack.github.io/docs/?utm_source=github&utm_medium=readme&utm_campaign=trdr) for quick Getting Started guide, in-depth usage,\r\ntutorials and resources.\r\n\r\n# Installation\r\n\r\nproject:\r\n`npm install webpack --save-dev`\r\n\r\nglobal:\r\n`npm install webpack -g`\r\nUsage\r\nhttps://webpack.github.io/docs/tutorials/getting-started/\r\n\r\n# Examples\r\n\r\nTake a look at the [`examples`](https://github.com/webpack/webpack/tree/master/examples) folder.\r\n\r\n# Features\r\n\r\n## Plugins\r\n\r\nwebpack has a [rich plugin\r\ninterface](https://webpack.github.io/docs/plugins.html). Most of the features\r\nwithin webpack itself use this plugin interface. This makes webpack very\r\n**flexible**.\r\n\r\n\r\n## Performance\r\n\r\nwebpack uses async I/O and has multiple caching levels. This makes webpack fast\r\nand incredibly **fast** on incremental compilations.\r\n\r\n## Loaders\r\n\r\nwebpack enables use of loaders to preprocess files. This allows you to bundle\r\n**any static resource** way beyond JavaScript. You can easily [write your own\r\nloaders](https://webpack.github.io/docs/loaders.html) using node.js.\r\n\r\nLoaders are activated by using `loadername!` prefixes in `require()` statements,\r\nor are automatically applied via regex from your webpack configuration.\r\n\r\nPlease see [Using Loaders](https://webpack.github.io/docs/using-loaders.html) for more information.\r\n\r\n**basic**\r\n* [`json`](https://github.com/webpack/json-loader): Loads file as JSON\r\n* [`raw`](https://github.com/webpack/raw-loader): Loads raw content of a file (as utf-8)\r\n* [`val`](https://github.com/webpack/val-loader): Executes code as module and consider exports as JavaScript code\r\n* [`script`](https://github.com/webpack/script-loader): Executes a JavaScript file once in global context (like in script tag), requires are not parsed.\r\n\r\n**packaging**\r\n* [`file`](https://github.com/webpack/file-loader): Emits the file into the output folder and returns the (relative) url.\r\n* [`url`](https://github.com/webpack/url-loader): The url loader works like the file loader, but can return a Data Url if the file is smaller than a limit.\r\n* [`image`](https://github.com/tcoopman/image-webpack-loader): Compresses your images. Ideal to use together with `file` or `url`.\r\n* [`svgo-loader`](https://github.com/pozadi/svgo-loader): Compresses SVG images using [svgo](https://github.com/svg/svgo) library\r\n* [`baggage`](https://github.com/deepsweet/baggage-loader): Automatically require any resources related to the required one\r\n* [`polymer-loader`](https://github.com/JonDum/polymer-loader): Process HTML & CSS with preprocessor of choice and `require()` Web Components like first-class modules.\r\n\r\n**dialects**\r\n* [`coffee`](https://github.com/webpack/coffee-loader): Loads coffee-script like JavaScript\r\n* [`babel`](https://github.com/babel/babel-loader): Turn ES6 code into vanilla ES5 using [Babel](https://github.com/babel/babel).\r\n* [`livescript`](https://github.com/appedemic/livescript-loader): Loads LiveScript like JavaScript\r\n* [`sweetjs`](https://github.com/jlongster/sweetjs-loader): Use sweetjs macros.\r\n* [`traceur`](https://github.com/jupl/traceur-loader): Use future JavaScript features with [Traceur](https://github.com/google/traceur-compiler).\r\n* [`typescript`](https://github.com/andreypopp/typescript-loader): Loads TypeScript like JavaScript.\r\n\r\n**templating**\r\n* [`html`](https://github.com/webpack/html-loader): Exports HTML as string, require references to static resources.\r\n* [`jade`](https://github.com/webpack/jade-loader): Loads jade template and returns a function\r\n* [`handlebars`](https://github.com/altano/handlebars-loader): Loads handlebars template and returns a function\r\n* [`ractive`](https://github.com/rstacruz/ractive-loader): Pre-compiles Ractive templates for interactive DOM manipulation\r\n* [`markdown`](https://github.com/peerigon/markdown-loader): Compiles Markdown to HTML\r\n* [`ng-cache`](https://github.com/teux/ng-cache-loader): Puts HTML partials in the Angular's $templateCache\r\n\r\n**styling**\r\n* [`style`](https://github.com/webpack/style-loader): Add exports of a module as style to DOM\r\n* [`css`](https://github.com/webpack/css-loader): Loads css file with resolved imports and returns css code\r\n* [`cssnext`](https://github.com/cssnext/cssnext-loader): Loads and compiles a css file using [cssnext](http://cssnext.io/)\r\n* [`less`](https://github.com/webpack/less-loader): Loads and compiles a less file\r\n* [`sass`](https://github.com/jtangelder/sass-loader): Loads and compiles a scss file\r\n* [`stylus`](https://github.com/shama/stylus-loader): Loads and compiles a stylus file\r\n\r\n**misc**\r\n* [`po`](https://github.com/dschissler/po-loader): Loads a PO gettext file and returns JSON\r\n* [`mocha`](https://github.com/webpack/mocha-loader): Do tests with mocha in browser or node.js\r\n* [`eslint`](https://github.com/MoOx/eslint-loader): PreLoader for linting code using ESLint.\r\n* [`jshint`](https://github.com/webpack/jshint-loader): PreLoader for linting code.\r\n* [`jscs`](https://github.com/unindented/jscs-loader): PreLoader for style checking.\r\n* [`injectable`](https://github.com/jauco/webpack-injectable): Allow to inject dependencies into modules\r\n* [`transform`](https://github.com/webpack/transform-loader): Use browserify transforms as loader.\r\n\r\nFor the full list of loaders, see [list of loaders](https://webpack.github.io/docs/list-of-loaders.html).\r\n\r\n## Module Format (AMD/CommonJS)\r\n\r\nwebpack supports **both** AMD and CommonJS module styles. It performs clever static\r\nanalysis on the AST of your code. It even has an evaluation engine to evaluate\r\nsimple expressions. This allows you to **support most existing libraries** out of the box.\r\n\r\n## Code Splitting\r\n\r\nwebpack allows you to split your codebase into multiple chunks. Chunks are\r\nloaded asynchronously at runtime. This reduces the initial loading time.\r\n\r\n[Code Splitting documentation](https://webpack.github.io/docs/code-splitting.html)\r\n\r\n## Optimizations\r\n\r\nwebpack can do many optimizations to **reduce the output size of your\r\nJavaScript** by deduplicating frequently used modules, minifying, and giving\r\nyou full control of what is loaded initially and what is loaded at runtime\r\nthrough code splitting. It can also can make your code chunks **cache\r\nfriendly** by using hashes.\r\n\r\n[Optimization documentation](https://webpack.github.io/docs/optimization.html)\r\n\r\nwebpack optimizes in several ways. It also makes your chunks **cache-friendly** by using hashes.\r\n\r\n# A small example of what's possible\r\n\r\n``` javascript\r\n// webpack is a module bundler.\r\n// This means webpack takes modules with dependencies\r\n// and emits static assets representing those modules.\r\n\r\n// Dependencies can be written in CommonJs\r\nvar commonjs = require(\"./commonjs\");\r\n// or in AMD\r\ndefine([\"amd-module\", \"../file\"], function (amdModule, file) {\r\n\t// while previous constructs are sync,\r\n\t// this is async\r\n\trequire([\"big-module/big/file\"], function (big) {\r\n\t\t // For async dependencies, webpack splits\r\n\t\t // your application into multiple \"chunks\".\r\n\t\t // This part of your application is\r\n\t\t // loaded on demand (code-splitting).\r\n\t\tvar stuff = require(\"../my/stuff\");\r\n\t\t// \"../my/stuff\" is also loaded on-demand\r\n\t\t//  because it's in the callback function\r\n\t\t//  of the AMD require.\r\n\t});\r\n});\r\n\r\n\r\nrequire(\"coffee!./cup.coffee\");\r\n// \"Loaders\" are used to preprocess files.\r\n// They can be prefixed in the require call\r\n// or configured in the configuration.\r\nrequire(\"./cup\");\r\n// This does the same when you add \".coffee\" to the extensions\r\n// and configure the \"coffee\" loader for /\\.coffee$/\r\n\r\nfunction loadTemplate (name) {\r\n\treturn require(\"./templates/\" + name + \".jade\");\r\n\t// Many expressions are supported in require calls.\r\n\t// A clever parser extracts information and concludes\r\n\t// that everything in \"./templates\" that matches\r\n\t// /\\.jade$/ should be included in the bundle, as it\r\n\t// can be required.\r\n}\r\n\r\n\r\n// ...and you can combine everything.\r\nfunction loadTemplateAsync (name, callback) {\r\n\trequire([\"bundle?lazy!./templates/\" + name + \".jade\"],\r\n\t  function (templateBundle) {\r\n\t          templateBundle(callback);\r\n\t});\r\n}\r\n```\r\n\r\n## Documentation\r\n\r\n[documentation](https://webpack.github.io/docs/?utm_source=github&utm_medium=readme&utm_campaign=documentation)\r\n\r\n\r\n## Changelog\r\n\r\n[changelog](https://webpack.github.io/docs/changelog.html)\r\n\r\n\r\n## Tests\r\n\r\nYou can run the Node tests with `npm test`.\r\n\r\nYou can run the browser tests:\r\n\r\n```\r\ncd test/browsertests\r\nnode build\r\n```\r\n\r\nand open `tests.html` in the browser.\r\n\r\n## Contribution\r\n\r\nMost of the time, if webpack is not working correctly for you it is a simple configuration issue.\r\n\r\nIf you are still having difficulty after looking over your configuration carefully, please post\r\na question to [StackOverflow with the webpack tag](http://stackoverflow.com/tags/webpack). Questions\r\nthat include your webpack.config.js and relevant files are more likely to receive responses.\r\n\r\nIf you have discovered a bug or have a feature suggestion, feel free to create an issue on Github.\r\n\r\nIf you create a loader or plugin, please consider open sourcing it, putting it\r\non NPM and following the `x-loader`, `x-plugin` convention.\r\n\r\nYou are also welcome to correct any spelling mistakes or any language issues.\r\n\r\nIf you want to discuss something or just need help, [here is our gitter.im room](https://gitter.im/webpack/webpack).\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2015 Tobias Koppers\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n\r\n## Thanks to\r\n\r\n(In chronological order)\r\n\r\n* @google for [Google Web Toolkit (GWT)](https://code.google.com/p/google-web-toolkit), which aims to compile Java to JavaScript. It features a similar [Code Splitting](https://code.google.com/p/google-web-toolkit/wiki/CodeSplitting) as webpack.\r\n* @medikoo for [modules-webmake](https://github.com/medikoo/modules-webmake), which is a similar project. webpack was born because I wanted Code Splitting for modules-webpack. Interestingly the [Code Splitting issue is still open](https://github.com/medikoo/modules-webmake/issues/7) (thanks also to @Phoscur for the discussion).\r\n* @substack for [browserify](http://browserify.org/), which is a similar project and source for many ideas.\r\n* @jrburke for [require.js](http://requirejs.org/), which is a similar project and source for many ideas.\r\n* @defunctzombie for the [browser-field spec](https://gist.github.com/defunctzombie/4339901), which makes modules available for node.js, browserify and webpack.\r\n* Every early webpack user, which contributed to webpack by writing issues or PRs. You influenced the direction...\r\n* @shama, @jhnns and @sokra for maintaining this project\r\n* Everyone who has written a loader for webpack. You are the ecosystem...\r\n* Everyone I forgot to mention here, but also influenced webpack.\r\n\r\n\r\n## Sponsor\r\n\r\nThis is a free-time project. The time I invest in it fluctuates. If you use webpack for a serious task, and you'd like me to invest more time on it, please donate. This project increases your income/productivity too. It makes development and applications faster and it reduces the required bandwidth.\r\n\r\nI'm very thankful for every dollar. If you leave your username or email, I may show my thanks by giving you extra support.\r\n\r\n\r\n## Dependencies\r\n\r\n* [esprima](http://esprima.org/)\r\n* [enhanced-resolve](https://github.com/webpack/enhanced-resolve)\r\n* [uglify-js](https://github.com/mishoo/UglifyJS)\r\n* [mocha](https://github.com/visionmedia/mocha)\r\n* [should](https://github.com/visionmedia/should.js)\r\n* [optimist](https://github.com/substack/node-optimist)\r\n* [async](https://github.com/caolan/async)\r\n* [mkdirp](https://github.com/substack/node-mkdirp)\r\n* [clone](https://github.com/pvorb/node-clone)\r\n\r\n\r\n[travis-url]: http://travis-ci.org/webpack/webpack\r\n[travis-image]: https://img.shields.io/travis/webpack/webpack.svg\r\n[appveyor-url]: https://ci.appveyor.com/project/sokra/webpack/branch/master\r\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/github/webpack/webpack?svg=true\r\n[coveralls-url]: https://coveralls.io/r/webpack/webpack/\r\n[coveralls-image]: https://img.shields.io/coveralls/webpack/webpack.svg\r\n[npm-url]: https://npmjs.org/package/webpack\r\n[npm-image]: https://img.shields.io/npm/v/webpack.svg\r\n[downloads-image]: http://img.shields.io/npm/dm/webpack.svg\r\n[downloads-url]: http://badge.fury.io/js/webpack\r\n[david-url]: https://david-dm.org/webpack/webpack\r\n[david-image]: https://img.shields.io/david/webpack/webpack.svg\r\n[david-dev-url]: https://david-dm.org/webpack/webpack#info=devDependencies\r\n[david-dev-image]: https://david-dm.org/webpack/webpack/dev-status.svg\r\n[david-peer-url]: https://david-dm.org/webpack/webpack#info=peerDependencies\r\n[david-peer-image]: https://david-dm.org/webpack/webpack/peer-status.svg\r\n[nodei-image]: https://nodei.co/npm/webpack.png?downloads=true&downloadRank=true&stars=true\r\n[nodei-url]: https://nodei.co/npm/webpack\r\n[donate-url]: http://sokra.github.io/\r\n[donate-image]: https://img.shields.io/badge/donate-sokra-brightgreen.svg\r\n[gratipay-url]: https://gratipay.com/webpack/\r\n[gratipay-image]: https://img.shields.io/gratipay/webpack.svg\r\n[gitter-url]: https://gitter.im/webpack/webpack\r\n[gitter-image]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg"
        },
        "npm": {
            "downloads": [{
                "from": "2017-01-22T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 47438
            }, {
                "from": "2017-01-16T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 1002260
            }, {
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 3082144
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 9666014
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 16569763
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 25914858
            }],
            "dependentsCount": 2192,
            "starsCount": 289
        },
        "github": {
            "homepage": "https://webpack.js.org",
            "starsCount": 23397,
            "forksCount": 2680,
            "subscribersCount": 958,
            "issues": {
                "count": 4076,
                "openCount": 685,
                "distribution": {
                    "3600": 305,
                    "10800": 214,
                    "32400": 351,
                    "97200": 510,
                    "291600": 385,
                    "874800": 440,
                    "2624400": 324,
                    "7873200": 318,
                    "23619600": 607,
                    "70858800": 593,
                    "212576400": 29
                },
                "isDisabled": false
            },
            "contributors": [{
                "username": "sokra",
                "commitsCount": 1701
            }, {
                "username": "TheLarkInn",
                "commitsCount": 110
            }, {
                "username": "timse",
                "commitsCount": 56
            }, {
                "username": "Kovensky",
                "commitsCount": 27
            }, {
                "username": "shubheksha",
                "commitsCount": 25
            }, {
                "username": "gajus",
                "commitsCount": 23
            }, {
                "username": "SpaceK33z",
                "commitsCount": 21
            }, {
                "username": "alistairjcbrown",
                "commitsCount": 21
            }, {
                "username": "kennyt",
                "commitsCount": 20
            }, {
                "username": "willmendesneto",
                "commitsCount": 20
            }, {
                "username": "thaiat",
                "commitsCount": 18
            }, {
                "username": "jhnns",
                "commitsCount": 15
            }, {
                "username": "carloscuatin",
                "commitsCount": 9
            }, {
                "username": "SimenB",
                "commitsCount": 8
            }, {
                "username": "e-cloud",
                "commitsCount": 7
            }, {
                "username": "zhaoshengjun",
                "commitsCount": 7
            }, {
                "username": "MrFusion42",
                "commitsCount": 6
            }, {
                "username": "chicoxyzzy",
                "commitsCount": 6
            }, {
                "username": "markmarijnissen",
                "commitsCount": 5
            }, {
                "username": "johanneslumpe",
                "commitsCount": 5
            }, {
                "username": "uncleyo",
                "commitsCount": 5
            }, {
                "username": "wtgtybhertgeghgtwtg",
                "commitsCount": 5
            }, {
                "username": "diurnalist",
                "commitsCount": 4
            }, {
                "username": "simonzack",
                "commitsCount": 4
            }, {
                "username": "hkal",
                "commitsCount": 4
            }, {
                "username": "JonDum",
                "commitsCount": 4
            }, {
                "username": "gaearon",
                "commitsCount": 4
            }, {
                "username": "dashed",
                "commitsCount": 4
            }, {
                "username": "bhamodi",
                "commitsCount": 4
            }, {
                "username": "GiuseppePiscopo",
                "commitsCount": 4
            }, {
                "username": "Tushkiz",
                "commitsCount": 4
            }, {
                "username": "zcfan",
                "commitsCount": 4
            }, {
                "username": "ritikrishu",
                "commitsCount": 4
            }, {
                "username": "malstoun",
                "commitsCount": 4
            }, {
                "username": "aem",
                "commitsCount": 4
            }, {
                "username": "shama",
                "commitsCount": 3
            }, {
                "username": "forivall",
                "commitsCount": 3
            }, {
                "username": "sebastienbarre",
                "commitsCount": 3
            }, {
                "username": "elliottsj",
                "commitsCount": 3
            }, {
                "username": "alexkuz",
                "commitsCount": 3
            }, {
                "username": "ReadmeCritic",
                "commitsCount": 3
            }, {
                "username": "akre54",
                "commitsCount": 3
            }, {
                "username": "rbartoli",
                "commitsCount": 3
            }, {
                "username": "amilajack",
                "commitsCount": 3
            }, {
                "username": "moo3",
                "commitsCount": 3
            }, {
                "username": "jamestautges",
                "commitsCount": 3
            }, {
                "username": "edge",
                "commitsCount": 3
            }, {
                "username": "inuscript",
                "commitsCount": 3
            }, {
                "username": "vigneshshanmugam",
                "commitsCount": 3
            }, {
                "username": "abouthiroppy",
                "commitsCount": 3
            }, {
                "username": "also",
                "commitsCount": 3
            }, {
                "username": "ahmedelgabri",
                "commitsCount": 3
            }, {
                "username": "songawee",
                "commitsCount": 3
            }, {
                "username": "Vijar",
                "commitsCount": 2
            }, {
                "username": "Taytay",
                "commitsCount": 2
            }, {
                "username": "kurtharriger",
                "commitsCount": 2
            }, {
                "username": "undoZen",
                "commitsCount": 2
            }, {
                "username": "mattsoltani",
                "commitsCount": 2
            }, {
                "username": "nickdima",
                "commitsCount": 2
            }, {
                "username": "DenisIzmaylov",
                "commitsCount": 2
            }, {
                "username": "bernii",
                "commitsCount": 2
            }, {
                "username": "simenbrekken",
                "commitsCount": 2
            }, {
                "username": "kmulvey",
                "commitsCount": 2
            }, {
                "username": "corporateanon",
                "commitsCount": 2
            }, {
                "username": "larrifax",
                "commitsCount": 2
            }, {
                "username": "nmccready",
                "commitsCount": 2
            }, {
                "username": "shivawu",
                "commitsCount": 2
            }, {
                "username": "jhen0409",
                "commitsCount": 2
            }, {
                "username": "gbk",
                "commitsCount": 2
            }, {
                "username": "jnwng",
                "commitsCount": 2
            }, {
                "username": "Globegitter",
                "commitsCount": 2
            }, {
                "username": "justingreenberg",
                "commitsCount": 2
            }, {
                "username": "pgilad",
                "commitsCount": 2
            }, {
                "username": "loganfsmyth",
                "commitsCount": 2
            }, {
                "username": "the4dpatrick",
                "commitsCount": 2
            }, {
                "username": "chentsulin",
                "commitsCount": 2
            }, {
                "username": "sharang-d",
                "commitsCount": 2
            }, {
                "username": "zwhitchcox",
                "commitsCount": 2
            }, {
                "username": "mxstbr",
                "commitsCount": 2
            }, {
                "username": "asarode",
                "commitsCount": 2
            }, {
                "username": "bransbury",
                "commitsCount": 2
            }, {
                "username": "jdalton",
                "commitsCount": 2
            }, {
                "username": "msingle",
                "commitsCount": 2
            }, {
                "username": "r0b1n",
                "commitsCount": 2
            }, {
                "username": "elodszopos",
                "commitsCount": 2
            }, {
                "username": "gyandeeps",
                "commitsCount": 2
            }, {
                "username": "naknode",
                "commitsCount": 2
            }, {
                "username": "nitishdayal",
                "commitsCount": 2
            }, {
                "username": "Fost",
                "commitsCount": 2
            }, {
                "username": "tejasbubane",
                "commitsCount": 2
            }, {
                "username": "rdrey",
                "commitsCount": 1
            }, {
                "username": "fernandoacorreia",
                "commitsCount": 1
            }, {
                "username": "polotek",
                "commitsCount": 1
            }, {
                "username": "vhpoet",
                "commitsCount": 1
            }, {
                "username": "ryancbarry",
                "commitsCount": 1
            }, {
                "username": "syranide",
                "commitsCount": 1
            }, {
                "username": "lettertwo",
                "commitsCount": 1
            }, {
                "username": "mzgoddard",
                "commitsCount": 1
            }, {
                "username": "hmalphettes",
                "commitsCount": 1
            }, {
                "username": "tcoopman",
                "commitsCount": 1
            }],
            "commits": [{
                "from": "2017-01-16T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 0
            }, {
                "from": "2016-12-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 264
            }, {
                "from": "2016-10-25T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 486
            }, {
                "from": "2016-07-27T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 668
            }, {
                "from": "2016-01-24T00:00:00.000Z",
                "to": "2017-01-23T00:00:00.000Z",
                "count": 921
            }],
            "statuses": [{
                "context": "continuous-integration/appveyor/branch",
                "state": "success"
            }, {
                "context": "codecov/project",
                "state": "success"
            }, {
                "context": "codecov/patch",
                "state": "success"
            }, {
                "context": "coverage/coveralls",
                "state": "success"
            }, {
                "context": "continuous-integration/travis-ci/push",
                "state": "success"
            }]
        },
        "source": {
            "files": {
                "readmeSize": 14666,
                "testsSize": 267933
            },
            "repositorySize": 1128330,
            "linters": {
                "general": ["editorconfig"],
                "js": ["eslint"]
            },
            "coverage": 0.94,
            "badges": [{
                "urls": {
                    "original": "https://img.shields.io/travis/webpack/webpack.svg",
                    "service": "https://api.travis-ci.org/webpack/webpack.svg",
                    "shields": "https://img.shields.io/travis/webpack/webpack.svg",
                    "content": "https://img.shields.io/travis/webpack/webpack.json"
                },
                "info": {
                    "service": "travis",
                    "type": "build"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/coveralls/webpack/webpack.svg",
                    "service": "https://coveralls.io/repos/webpack/webpack/badge.svg",
                    "shields": "https://img.shields.io/coveralls/webpack/webpack.svg",
                    "content": "https://img.shields.io/coveralls/webpack/webpack.json"
                },
                "info": {
                    "service": "coveralls",
                    "type": "coverage"
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/npm/v/webpack.svg",
                    "shields": "https://img.shields.io/npm/v/webpack.svg",
                    "content": "https://img.shields.io/npm/v/webpack.json"
                },
                "info": {
                    "service": "npm",
                    "type": "version",
                    "modifiers": {
                        "type": "v"
                    }
                }
            }, {
                "urls": {
                    "original": "http://img.shields.io/npm/dm/webpack.svg",
                    "shields": "https://img.shields.io/npm/dm/webpack.svg",
                    "content": "https://img.shields.io/npm/dm/webpack.json"
                },
                "info": {
                    "service": "npm",
                    "type": "downloads",
                    "modifiers": {
                        "type": "dm"
                    }
                }
            }, {
                "urls": {
                    "original": "https://img.shields.io/david/webpack/webpack.svg",
                    "service": "https://david-dm.org/webpack/webpack.svg",
                    "shields": "https://img.shields.io/david/webpack/webpack.svg",
                    "content": "https://img.shields.io/david/webpack/webpack.json"
                },
                "info": {
                    "service": "david",
                    "type": "dependencies",
                    "modifiers": {
                        "statusType": "normal"
                    }
                }
            }, {
                "urls": {
                    "original": "https://david-dm.org/webpack/webpack/dev-status.svg",
                    "service": "https://david-dm.org/webpack/webpack/dev-status.svg",
                    "shields": "https://img.shields.io/david/dev/webpack/webpack.svg",
                    "content": "https://img.shields.io/david/dev/webpack/webpack.json"
                },
                "info": {
                    "service": "david",
                    "type": "dependencies",
                    "modifiers": {
                        "statusType": "dev"
                    }
                }
            }, {
                "urls": {
                    "original": "https://david-dm.org/webpack/webpack/peer-status.svg",
                    "service": "https://david-dm.org/webpack/webpack/peer-status.svg",
                    "shields": "https://img.shields.io/david/peer/webpack/webpack.svg",
                    "content": "https://img.shields.io/david/peer/webpack/webpack.json"
                },
                "info": {
                    "service": "david",
                    "type": "dependencies",
                    "modifiers": {
                        "statusType": "peer"
                    }
                }
            }, {
                "urls": {
                    "original": "https://nodei.co/npm/webpack.png?downloadRank=true&downloads=true&stars=true",
                    "shields": "https://img.shields.io/npm/v/webpack.svg",
                    "content": "https://img.shields.io/npm/v/webpack.json"
                },
                "info": {
                    "service": "npm",
                    "type": "version"
                }
            }],
            "outdatedDependencies": {
                "acorn": {
                    "required": "^3.0.0",
                    "stable": "4.0.4",
                    "latest": "4.0.4"
                },
                "async": {
                    "required": "^1.3.0",
                    "stable": "2.1.4",
                    "latest": "2.1.4"
                },
                "clone": {
                    "required": "^1.0.2",
                    "stable": "2.1.0",
                    "latest": "2.1.0"
                },
                "memory-fs": {
                    "required": "~0.3.0",
                    "stable": "0.4.1",
                    "latest": "0.4.1"
                },
                "interpret": {
                    "required": "^0.6.4",
                    "stable": "1.0.1",
                    "latest": "1.0.1"
                },
                "tapable": {
                    "required": "~0.1.8",
                    "stable": "0.2.6",
                    "latest": "0.2.6"
                },
                "enhanced-resolve": {
                    "required": "~0.9.0",
                    "stable": "3.0.3",
                    "latest": "3.0.3"
                },
                "watchpack": {
                    "required": "^0.2.1",
                    "stable": "1.2.0",
                    "latest": "1.2.0"
                }
            }
        }
    },
    "evaluation": {
        "quality": {
            "carefulness": 0.9199999999999999,
            "tests": 0.991,
            "health": 0.5,
            "branding": 0.6
        },
        "popularity": {
            "communityInterest": 27424,
            "downloadsCount": 3222004.6666666665,
            "downloadsAcceleration": 13198.287576103496,
            "dependentsCount": 2192
        },
        "maintenance": {
            "releasesFrequency": 1,
            "commitsFrequency": 1,
            "openIssues": 1,
            "issuesDistribution": 0.13818459445527087
        }
    },
    "score": {
        "final": 0.8468186472897078,
        "detail": {
            "quality": 0.9314529392000708,
            "popularity": 0.8528880222095914,
            "maintenance": 0.768205593589513
        }
    }
}